// Next run Pass --triton-nvidia-gpu-fence-insertion
// IR Dump After TritonNvidiaGPUTMALoweringPass ('builtin.module' operation)
// Current Run Pass --triton-nvidia-tma-lowering

#blocked = #ttg.blocked<{sizePerThread = [1, 64], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [2, 2], order = [1, 0]}>
#loc = loc("/home/ubuntu/triton/matmul.py":6:0)
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 32}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared2 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 32}>
#smem = #ttg.shared_memory
#tmem = #ttng.tensor_memory_encoding<blockM = 128, blockN = 64, unpacked = true>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:100", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel_make_tensor_desciptor(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0)) attributes {noinline = false} {
    %c4_i64 = arith.constant 4 : i64 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #blocked> loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %false = arith.constant false loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.extsi %arg4 : i32 to i64 loc(#loc4)
    %3 = ttg.global_scratch_alloc {alignment = 128 : i32, nbytes = 128 : i32} : !tt.ptr<i8> loc(#loc4)
    %4 = arith.muli %2, %c4_i64 : i64 loc(#loc4)
    ttng.tensormap_create %3, %arg0, [%c32_i32, %c128_i32], [%arg4, %arg3], [%4], [%c1_i32, %c1_i32] {elem_type = 7 : i32, fill_mode = 0 : i32, interleave_layout = 0 : i32, swizzle_mode = 3 : i32} : (!tt.ptr<i8>, !tt.ptr<f32>, i32, i32, i32, i32, i64, i32, i32) -> () loc(#loc4)
    ttng.tensormap_fenceproxy_acquire %3 : !tt.ptr<i8> loc(#loc4)
    %5 = ttng.reinterpret_tensor_descriptor %3 : !tt.ptr<i8> to !tt.tensordesc<tensor<128x64xf32, #shared>> loc(#loc4)
    %6 = arith.extsi %arg5 : i32 to i64 loc(#loc5)
    %7 = ttg.global_scratch_alloc {alignment = 128 : i32, nbytes = 128 : i32} : !tt.ptr<i8> loc(#loc5)
    %8 = arith.muli %6, %c4_i64 : i64 loc(#loc5)
    ttng.tensormap_create %7, %arg1, [%c32_i32, %c64_i32], [%arg5, %arg4], [%8], [%c1_i32, %c1_i32] {elem_type = 7 : i32, fill_mode = 0 : i32, interleave_layout = 0 : i32, swizzle_mode = 3 : i32} : (!tt.ptr<i8>, !tt.ptr<f32>, i32, i32, i32, i32, i64, i32, i32) -> () loc(#loc5)
    ttng.tensormap_fenceproxy_acquire %7 : !tt.ptr<i8> loc(#loc5)
    %9 = ttng.reinterpret_tensor_descriptor %7 : !tt.ptr<i8> to !tt.tensordesc<tensor<64x64xf32, #shared>> loc(#loc5)
    %10 = ttg.global_scratch_alloc {alignment = 128 : i32, nbytes = 128 : i32} : !tt.ptr<i8> loc(#loc6)
    %11 = arith.muli %6, %c4_i64 : i64 loc(#loc6)
    ttng.tensormap_create %10, %arg2, [%c32_i32, %c128_i32], [%arg5, %arg3], [%11], [%c1_i32, %c1_i32] {elem_type = 7 : i32, fill_mode = 0 : i32, interleave_layout = 0 : i32, swizzle_mode = 3 : i32} : (!tt.ptr<i8>, !tt.ptr<f32>, i32, i32, i32, i32, i64, i32, i32) -> () loc(#loc6)
    ttng.tensormap_fenceproxy_acquire %10 : !tt.ptr<i8> loc(#loc6)
    %12 = ttng.reinterpret_tensor_descriptor %10 : !tt.ptr<i8> to !tt.tensordesc<tensor<128x64xf32, #shared>> loc(#loc6)
    %13 = arith.addi %arg4, %c63_i32 : i32 loc(#loc19)
    %14 = arith.divsi %13, %c64_i32 : i32 loc(#loc20)
    %15 = arith.muli %0, %c128_i32 : i32 loc(#loc10)
    %16 = arith.muli %1, %c64_i32 : i32 loc(#loc11)
    %result = ttng.tmem_alloc : () -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable> loc(#loc12)
    ttng.tmem_store %cst, %result, %true : tensor<128x64xf32, #blocked> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable> loc(#loc12)
    %17 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc13)
    %18 = ttg.memdesc_subview %17[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc13)
    ttng.init_barrier %18, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc13)
    %19 = ttg.memdesc_subview %17[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc13)
    ttng.init_barrier %19, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc13)
    %20 = ttg.local_alloc : () -> !ttg.memdesc<3x128x64xf32, #shared, #smem, mutable> loc(#loc14)
    %21 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xf32, #shared, #smem, mutable> loc(#loc15)
    %22 = ttg.local_alloc : () -> !ttg.memdesc<3xi64, #shared1, #smem, mutable> loc(#loc13)
    %23 = ttg.memdesc_subview %22[%c0_i32] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    ttng.init_barrier %23, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    %24 = ttg.memdesc_subview %22[%c1_i32] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    ttng.init_barrier %24, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    %25 = ttg.memdesc_subview %22[%c2_i32] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    ttng.init_barrier %25, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    %26 = arith.cmpi sgt, %14, %c0_i32 : i32 loc(#loc13)
    ttng.barrier_expect %23, 49152, %26 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    %27 = ttg.memdesc_subview %20[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
    ttng.async_tma_copy_global_to_local %5[%15, %c0_i32] %27, %23, %26 : !tt.tensordesc<tensor<128x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
    %28 = ttg.memdesc_subview %21[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
    ttng.async_tma_copy_global_to_local %9[%c0_i32, %16] %28, %23, %26 : !tt.tensordesc<tensor<64x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
    %29 = arith.cmpi sgt, %14, %c1_i32 : i32 loc(#loc13)
    ttng.barrier_expect %24, 49152, %29 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    %30 = ttg.memdesc_subview %20[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
    ttng.async_tma_copy_global_to_local %5[%15, %c64_i32] %30, %24, %29 : !tt.tensordesc<tensor<128x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
    %31 = ttg.memdesc_subview %21[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
    ttng.async_tma_copy_global_to_local %9[%c64_i32, %16] %31, %24, %29 : !tt.tensordesc<tensor<64x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
    %32 = arith.cmpi sgt, %14, %c2_i32 : i32 loc(#loc13)
    ttng.wait_barrier %23, %c0_i32, %26 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    %33 = ttg.local_load %28 : !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> -> tensor<64x64xf32, #blocked1> loc(#loc15)
    %34 = ttg.local_alloc %33 : (tensor<64x64xf32, #blocked1>) -> !ttg.memdesc<64x64xf32, #shared2, #smem> loc(#loc15)
    ttng.tc_gen5_mma %27, %34, %result, %false, %26, %18[%true] : !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared2, #smem>, !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc12)
    ttng.barrier_expect %25, 49152, %32 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    %35 = ttg.memdesc_subview %20[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
    ttng.async_tma_copy_global_to_local %5[%15, %c128_i32] %35, %25, %32 : !tt.tensordesc<tensor<128x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
    %36 = ttg.memdesc_subview %21[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
    ttng.async_tma_copy_global_to_local %9[%c128_i32, %16] %36, %25, %32 : !tt.tensordesc<tensor<64x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
    %37 = arith.subi %14, %c1_i32 : i32 loc(#loc13)
    %38:9 = scf.for %arg6 = %c0_i32 to %37 step %c1_i32 iter_args(%arg7 = %c0_i32, %arg8 = %c1_i32, %arg9 = %c2_i32, %arg10 = %c0_i32, %arg11 = %c0_i32, %arg12 = %18, %arg13 = %c0_i32, %arg14 = %27, %arg15 = %34) -> (i32, i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2>, i32, !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared2, #smem>)  : i32 {
      %41 = arith.subi %14, %c3_i32 : i32 loc(#loc13)
      %42 = arith.cmpi slt, %arg6, %41 : i32 loc(#loc13)
      %43 = arith.addi %arg10, %c1_i32 : i32 loc(#loc13)
      %44 = arith.cmpi sge, %43, %c3_i32 : i32 loc(#loc13)
      %45 = arith.select %44, %c0_i32, %43 : i32 loc(#loc13)
      %46 = arith.xori %arg11, %c1_i32 : i32 loc(#loc13)
      %47 = arith.select %44, %46, %arg11 : i32 loc(#loc13)
      %48 = ttg.memdesc_subview %22[%45] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
      ttng.wait_barrier %48, %47, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
      %49 = ttg.memdesc_subview %21[%45, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
      %50 = ttg.local_load %49 : !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> -> tensor<64x64xf32, #blocked1> loc(#loc15)
      %51 = ttg.local_alloc %50 : (tensor<64x64xf32, #blocked1>) -> !ttg.memdesc<64x64xf32, #shared2, #smem> loc(#loc15)
      %52 = ttg.memdesc_subview %20[%45, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
      %53 = ttg.memdesc_subview %17[%arg8] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc13)
      ttng.tc_gen5_mma %52, %51, %result, %true, %true, %53[%true] : !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared2, #smem>, !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc12)
      ttng.wait_barrier %arg12, %arg13 deps %arg14, %arg15 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2>, !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared2, #smem> loc(#loc12)
      %54 = arith.xori %arg7, %c1_i32 : i32 loc(#loc12)
      %55 = arith.addi %arg8, %c1_i32 : i32 loc(#loc12)
      %56 = arith.cmpi sge, %55, %c2_i32 : i32 loc(#loc12)
      %57 = arith.select %56, %c0_i32, %55 : i32 loc(#loc12)
      %58 = arith.select %56, %54, %arg7 : i32 loc(#loc12)
      %59 = arith.addi %arg9, %c1_i32 : i32 loc(#loc13)
      %60 = arith.cmpi sge, %59, %c3_i32 : i32 loc(#loc13)
      %61 = arith.select %60, %c0_i32, %59 : i32 loc(#loc13)
      %62 = arith.addi %arg6, %c3_i32 : i32 loc(#loc13)
      %63 = arith.muli %62, %c64_i32 : i32 loc(#loc16)
      %64 = ttg.memdesc_subview %22[%61] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
      ttng.barrier_expect %64, 49152, %42 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
      %65 = ttg.memdesc_subview %20[%61, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
      ttng.async_tma_copy_global_to_local %5[%15, %63] %65, %64, %42 : !tt.tensordesc<tensor<128x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
      %66 = ttg.memdesc_subview %21[%61, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
      ttng.async_tma_copy_global_to_local %9[%63, %16] %66, %64, %42 : !tt.tensordesc<tensor<64x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
      scf.yield %58, %57, %61, %45, %47, %53, %arg7, %52, %51 : i32, i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2>, i32, !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared2, #smem> loc(#loc13)
    } loc(#loc13)
    scf.if %26 {
      ttng.wait_barrier %38#5, %38#6 deps %38#7, %38#8 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2>, !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared2, #smem> loc(#loc12)
    } loc(#loc13)
    ttng.inval_barrier %23 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    ttng.inval_barrier %24 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    ttng.inval_barrier %25 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    ttg.local_dealloc %22 : !ttg.memdesc<3xi64, #shared1, #smem, mutable> loc(#loc13)
    ttg.local_dealloc %21 : !ttg.memdesc<3x64x64xf32, #shared, #smem, mutable> loc(#loc13)
    ttg.local_dealloc %20 : !ttg.memdesc<3x128x64xf32, #shared, #smem, mutable> loc(#loc13)
    ttng.inval_barrier %18 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc13)
    ttng.inval_barrier %19 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc13)
    ttg.local_dealloc %17 : !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc13)
    %result_0 = ttng.tmem_load %result : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable> -> tensor<128x64xf32, #blocked> loc(#loc12)
    %39 = ttg.convert_layout %result_0 : tensor<128x64xf32, #blocked> -> tensor<128x64xf32, #blocked1> loc(#loc13)
    %40 = ttg.local_alloc %39 : (tensor<128x64xf32, #blocked1>) -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable> loc(#loc17)
    ttng.fence_async_shared {bCluster = false} loc(#loc17)
    ttng.async_tma_copy_local_to_global %12[%15, %16] %40 : !tt.tensordesc<tensor<128x64xf32, #shared>>, !ttg.memdesc<128x64xf32, #shared, #smem, mutable> loc(#loc17)
    ttng.async_tma_store_wait {pendings = 0 : i32} loc(#loc17)
    tt.return loc(#loc18)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/triton/matmul.py":14:26)
#loc3 = loc("/home/ubuntu/triton/matmul.py":15:26)
#loc4 = loc("/home/ubuntu/triton/matmul.py":18:8)
#loc5 = loc("/home/ubuntu/triton/matmul.py":24:8)
#loc6 = loc("/home/ubuntu/triton/matmul.py":30:8)
#loc7 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:22)
#loc8 = loc("/home/ubuntu/triton/matmul.py":37:30)
#loc9 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:28)
#loc10 = loc("/home/ubuntu/triton/matmul.py":38:33)
#loc11 = loc("/home/ubuntu/triton/matmul.py":39:51)
#loc12 = loc("/home/ubuntu/triton/matmul.py":40:32)
#loc13 = loc("/home/ubuntu/triton/matmul.py":37:19)
#loc14 = loc("/home/ubuntu/triton/matmul.py":38:24)
#loc15 = loc("/home/ubuntu/triton/matmul.py":39:24)
#loc16 = loc("/home/ubuntu/triton/matmul.py":38:51)
#loc17 = loc("/home/ubuntu/triton/matmul.py":43:63)
#loc18 = loc("/home/ubuntu/triton/matmul.py":43:4)
#loc19 = loc(callsite(#loc7 at #loc8))
#loc20 = loc(callsite(#loc9 at #loc8))
