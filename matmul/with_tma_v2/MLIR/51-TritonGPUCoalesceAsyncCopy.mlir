// Next run Pass --triton-nvidia-optimize-tmem-layouts
// IR Dump After TritonGPUCoalesceAsyncCopy ('builtin.module' operation)
// Current Run Pass --tritongpu-coalesce-async-copy

#blocked = #ttg.blocked<{sizePerThread = [1, 64], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [2, 2], order = [1, 0]}>
#loc = loc("/home/ubuntu/triton/matmul.py":6:0)
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 32}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared2 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 32}>
#smem = #ttg.shared_memory
#tmem = #ttng.tensor_memory_encoding<blockM = 128, blockN = 64, unpacked = true>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:100", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel_make_tensor_desciptor(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0)) attributes {noinline = false} {
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #blocked> loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c1_i64 = arith.constant 1 : i64 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %false = arith.constant false loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.extsi %arg4 : i32 to i64 loc(#loc4)
    %3 = tt.make_tensor_descriptor %arg0, [%arg3, %arg4], [%2, %c1_i64] : <f32>, <tensor<128x64xf32, #shared>> loc(#loc4)
    %4 = arith.extsi %arg5 : i32 to i64 loc(#loc5)
    %5 = tt.make_tensor_descriptor %arg1, [%arg4, %arg5], [%4, %c1_i64] : <f32>, <tensor<64x64xf32, #shared>> loc(#loc5)
    %6 = tt.make_tensor_descriptor %arg2, [%arg3, %arg5], [%4, %c1_i64] : <f32>, <tensor<128x64xf32, #shared>> loc(#loc6)
    %7 = arith.addi %arg4, %c63_i32 : i32 loc(#loc19)
    %8 = arith.divsi %7, %c64_i32 : i32 loc(#loc20)
    %9 = arith.muli %0, %c128_i32 : i32 loc(#loc10)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc11)
    %result = ttng.tmem_alloc : () -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable> loc(#loc12)
    ttng.tmem_store %cst, %result, %true : tensor<128x64xf32, #blocked> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable> loc(#loc12)
    %11 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc13)
    %12 = ttg.memdesc_subview %11[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc13)
    ttng.init_barrier %12, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc13)
    %13 = ttg.memdesc_subview %11[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc13)
    ttng.init_barrier %13, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc13)
    %14 = ttg.local_alloc : () -> !ttg.memdesc<3x128x64xf32, #shared, #smem, mutable> loc(#loc14)
    %15 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xf32, #shared, #smem, mutable> loc(#loc15)
    %16 = ttg.local_alloc : () -> !ttg.memdesc<3xi64, #shared1, #smem, mutable> loc(#loc13)
    %17 = ttg.memdesc_subview %16[%c0_i32] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    ttng.init_barrier %17, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    %18 = ttg.memdesc_subview %16[%c1_i32] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    ttng.init_barrier %18, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    %19 = ttg.memdesc_subview %16[%c2_i32] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    ttng.init_barrier %19, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    %20 = arith.cmpi sgt, %8, %c0_i32 : i32 loc(#loc13)
    ttng.barrier_expect %17, 49152, %20 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    %21 = ttg.memdesc_subview %14[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
    ttng.async_tma_copy_global_to_local %3[%9, %c0_i32] %21, %17, %20 : !tt.tensordesc<tensor<128x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
    %22 = ttg.memdesc_subview %15[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
    ttng.async_tma_copy_global_to_local %5[%c0_i32, %10] %22, %17, %20 : !tt.tensordesc<tensor<64x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
    %23 = arith.cmpi sgt, %8, %c1_i32 : i32 loc(#loc13)
    ttng.barrier_expect %18, 49152, %23 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    %24 = ttg.memdesc_subview %14[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
    ttng.async_tma_copy_global_to_local %3[%9, %c64_i32] %24, %18, %23 : !tt.tensordesc<tensor<128x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
    %25 = ttg.memdesc_subview %15[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
    ttng.async_tma_copy_global_to_local %5[%c64_i32, %10] %25, %18, %23 : !tt.tensordesc<tensor<64x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
    %26 = arith.cmpi sgt, %8, %c2_i32 : i32 loc(#loc13)
    ttng.wait_barrier %17, %c0_i32, %20 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    %27 = ttg.local_load %22 : !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> -> tensor<64x64xf32, #blocked1> loc(#loc15)
    %28 = ttg.local_alloc %27 : (tensor<64x64xf32, #blocked1>) -> !ttg.memdesc<64x64xf32, #shared2, #smem> loc(#loc15)
    ttng.tc_gen5_mma %21, %28, %result, %false, %20, %12[%true] : !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared2, #smem>, !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc12)
    ttng.barrier_expect %19, 49152, %26 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    %29 = ttg.memdesc_subview %14[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
    ttng.async_tma_copy_global_to_local %3[%9, %c128_i32] %29, %19, %26 : !tt.tensordesc<tensor<128x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
    %30 = ttg.memdesc_subview %15[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
    ttng.async_tma_copy_global_to_local %5[%c128_i32, %10] %30, %19, %26 : !tt.tensordesc<tensor<64x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
    %31 = arith.subi %8, %c1_i32 : i32 loc(#loc13)
    %32:9 = scf.for %arg6 = %c0_i32 to %31 step %c1_i32 iter_args(%arg7 = %c0_i32, %arg8 = %c1_i32, %arg9 = %c2_i32, %arg10 = %c0_i32, %arg11 = %c0_i32, %arg12 = %12, %arg13 = %c0_i32, %arg14 = %21, %arg15 = %28) -> (i32, i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2>, i32, !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared2, #smem>)  : i32 {
      %34 = arith.subi %8, %c3_i32 : i32 loc(#loc13)
      %35 = arith.cmpi slt, %arg6, %34 : i32 loc(#loc13)
      %36 = arith.addi %arg10, %c1_i32 : i32 loc(#loc13)
      %37 = arith.cmpi sge, %36, %c3_i32 : i32 loc(#loc13)
      %38 = arith.select %37, %c0_i32, %36 : i32 loc(#loc13)
      %39 = arith.xori %arg11, %c1_i32 : i32 loc(#loc13)
      %40 = arith.select %37, %39, %arg11 : i32 loc(#loc13)
      %41 = ttg.memdesc_subview %16[%38] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
      ttng.wait_barrier %41, %40, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
      %42 = ttg.memdesc_subview %15[%38, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
      %43 = ttg.local_load %42 : !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> -> tensor<64x64xf32, #blocked1> loc(#loc15)
      %44 = ttg.memdesc_subview %14[%38, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
      %45 = ttg.local_alloc %43 : (tensor<64x64xf32, #blocked1>) -> !ttg.memdesc<64x64xf32, #shared2, #smem> loc(#loc15)
      %46 = ttg.memdesc_subview %11[%arg8] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc13)
      ttng.tc_gen5_mma %44, %45, %result, %true, %true, %46[%true] : !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared2, #smem>, !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc12)
      ttng.wait_barrier %arg12, %arg13 deps %arg14, %arg15 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2>, !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared2, #smem> loc(#loc12)
      %47 = arith.xori %arg7, %c1_i32 : i32 loc(#loc12)
      %48 = arith.addi %arg8, %c1_i32 : i32 loc(#loc12)
      %49 = arith.cmpi sge, %48, %c2_i32 : i32 loc(#loc12)
      %50 = arith.select %49, %c0_i32, %48 : i32 loc(#loc12)
      %51 = arith.select %49, %47, %arg7 : i32 loc(#loc12)
      %52 = arith.addi %arg9, %c1_i32 : i32 loc(#loc13)
      %53 = arith.cmpi sge, %52, %c3_i32 : i32 loc(#loc13)
      %54 = arith.select %53, %c0_i32, %52 : i32 loc(#loc13)
      %55 = arith.addi %arg6, %c3_i32 : i32 loc(#loc13)
      %56 = arith.muli %55, %c64_i32 : i32 loc(#loc16)
      %57 = ttg.memdesc_subview %16[%54] : !ttg.memdesc<3xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
      ttng.barrier_expect %57, 49152, %35 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
      %58 = ttg.memdesc_subview %14[%54, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
      ttng.async_tma_copy_global_to_local %3[%9, %56] %58, %57, %35 : !tt.tensordesc<tensor<128x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64> loc(#loc14)
      %59 = ttg.memdesc_subview %15[%54, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
      ttng.async_tma_copy_global_to_local %5[%56, %10] %59, %57, %35 : !tt.tensordesc<tensor<64x64xf32, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> -> !ttg.memdesc<64x64xf32, #shared, #smem, mutable, 3x64x64> loc(#loc15)
      scf.yield %51, %50, %54, %38, %40, %46, %arg7, %44, %45 : i32, i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2>, i32, !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared2, #smem> loc(#loc13)
    } loc(#loc13)
    scf.if %20 {
      ttng.wait_barrier %32#5, %32#6 deps %32#7, %32#8 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2>, !ttg.memdesc<128x64xf32, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared2, #smem> loc(#loc12)
    } loc(#loc13)
    ttng.inval_barrier %17 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    ttng.inval_barrier %18 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    ttng.inval_barrier %19 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 3> loc(#loc13)
    ttg.local_dealloc %16 : !ttg.memdesc<3xi64, #shared1, #smem, mutable> loc(#loc13)
    ttg.local_dealloc %15 : !ttg.memdesc<3x64x64xf32, #shared, #smem, mutable> loc(#loc13)
    ttg.local_dealloc %14 : !ttg.memdesc<3x128x64xf32, #shared, #smem, mutable> loc(#loc13)
    ttng.inval_barrier %12 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc13)
    ttng.inval_barrier %13 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2> loc(#loc13)
    ttg.local_dealloc %11 : !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc13)
    %result_0 = ttng.tmem_load %result : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable> -> tensor<128x64xf32, #blocked> loc(#loc12)
    %33 = ttg.convert_layout %result_0 : tensor<128x64xf32, #blocked> -> tensor<128x64xf32, #blocked1> loc(#loc13)
    tt.descriptor_store %6[%9, %10], %33 : !tt.tensordesc<tensor<128x64xf32, #shared>>, tensor<128x64xf32, #blocked1> loc(#loc17)
    tt.return loc(#loc18)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/triton/matmul.py":14:26)
#loc3 = loc("/home/ubuntu/triton/matmul.py":15:26)
#loc4 = loc("/home/ubuntu/triton/matmul.py":18:8)
#loc5 = loc("/home/ubuntu/triton/matmul.py":24:8)
#loc6 = loc("/home/ubuntu/triton/matmul.py":30:8)
#loc7 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:22)
#loc8 = loc("/home/ubuntu/triton/matmul.py":37:30)
#loc9 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:28)
#loc10 = loc("/home/ubuntu/triton/matmul.py":38:33)
#loc11 = loc("/home/ubuntu/triton/matmul.py":39:51)
#loc12 = loc("/home/ubuntu/triton/matmul.py":40:32)
#loc13 = loc("/home/ubuntu/triton/matmul.py":37:19)
#loc14 = loc("/home/ubuntu/triton/matmul.py":38:24)
#loc15 = loc("/home/ubuntu/triton/matmul.py":39:24)
#loc16 = loc("/home/ubuntu/triton/matmul.py":38:51)
#loc17 = loc("/home/ubuntu/triton/matmul.py":43:63)
#loc18 = loc("/home/ubuntu/triton/matmul.py":43:4)
#loc19 = loc(callsite(#loc7 at #loc8))
#loc20 = loc(callsite(#loc9 at #loc8))
