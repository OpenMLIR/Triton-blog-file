// Next run Pass --inline
// IR Dump After Python ast_to_ttir

#loc = loc("/home/ubuntu/triton/matmul.py":6:0)
#loc25 = loc("/home/ubuntu/triton/python/triton/language/standard.py":31:0)
module {
  tt.func public @matmul_kernel_make_tensor_desciptor(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.get_program_id y : i32 loc(#loc2)
    %2 = arith.extsi %arg4 : i32 to i64 loc(#loc3)
    %c1_i64 = arith.constant 1 : i64 loc(#loc3)
    %3 = tt.make_tensor_descriptor %arg0, [%arg3, %arg4], [%2, %c1_i64] : <f32>, <tensor<128x64xf32>> loc(#loc3)
    %4 = arith.extsi %arg5 : i32 to i64 loc(#loc4)
    %c1_i64_0 = arith.constant 1 : i64 loc(#loc4)
    %5 = tt.make_tensor_descriptor %arg1, [%arg4, %arg5], [%4, %c1_i64_0] : <f32>, <tensor<64x64xf32>> loc(#loc4)
    %6 = arith.extsi %arg5 : i32 to i64 loc(#loc5)
    %c1_i64_1 = arith.constant 1 : i64 loc(#loc5)
    %7 = tt.make_tensor_descriptor %arg2, [%arg3, %arg5], [%6, %c1_i64_1] : <f32>, <tensor<128x64xf32>> loc(#loc5)
    %8 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<128x64xf32> loc(#loc6)
    %9 = tt.call @"triton.language.standard.cdiv__i32__(1,)cconstexpr_64_"(%arg4) : (i32) -> i32 loc(#loc7)
    %10 = tt.call @"triton.language.standard.cdiv__i32__(1,)cconstexpr_64_"(%arg4) : (i32) -> i32 loc(#loc7)
    %c0_i32 = arith.constant 0 : i32 loc(#loc8)
    %c1_i32 = arith.constant 1 : i32 loc(#loc8)
    %11 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc8)
    %12 = arith.bitcast %10 : i32 to i32 loc(#loc8)
    %13 = arith.bitcast %c1_i32 : i32 to i32 loc(#loc8)
    %14 = ub.poison : i32 loc(#loc8)
    %15 = scf.for %arg6 = %11 to %12 step %13 iter_args(%arg7 = %8) -> (tensor<128x64xf32>)  : i32 {
      %c128_i32_6 = arith.constant 128 : i32 loc(#loc9)
      %c128_i32_7 = arith.constant 128 : i32 loc(#loc9)
      %30 = arith.extsi %0 : i32 to i64 loc(#loc9)
      %31 = arith.extsi %c128_i32_7 : i32 to i64 loc(#loc9)
      %32 = arith.muli %30, %31 : i64 loc(#loc9)
      %c2147483647_i64_8 = arith.constant 2147483647 : i64 loc(#loc9)
      %c-2147483648_i64_9 = arith.constant -2147483648 : i64 loc(#loc9)
      %33 = arith.cmpi sle, %32, %c2147483647_i64_8 : i64 loc(#loc9)
      %34 = arith.cmpi sge, %32, %c-2147483648_i64_9 : i64 loc(#loc9)
      %35 = arith.andi %33, %34 : i1 loc(#loc9)
      %36 = arith.muli %0, %c128_i32_7 : i32 loc(#loc9)
      %c64_i32_10 = arith.constant 64 : i32 loc(#loc10)
      %c64_i32_11 = arith.constant 64 : i32 loc(#loc10)
      %37 = arith.extsi %arg6 : i32 to i64 loc(#loc10)
      %38 = arith.extsi %c64_i32_11 : i32 to i64 loc(#loc10)
      %39 = arith.muli %37, %38 : i64 loc(#loc10)
      %c2147483647_i64_12 = arith.constant 2147483647 : i64 loc(#loc10)
      %c-2147483648_i64_13 = arith.constant -2147483648 : i64 loc(#loc10)
      %40 = arith.cmpi sle, %39, %c2147483647_i64_12 : i64 loc(#loc10)
      %41 = arith.cmpi sge, %39, %c-2147483648_i64_13 : i64 loc(#loc10)
      %42 = arith.andi %40, %41 : i1 loc(#loc10)
      %43 = arith.muli %arg6, %c64_i32_11 : i32 loc(#loc10)
      %44 = tt.descriptor_load %3[%36, %43] : !tt.tensordesc<tensor<128x64xf32>> -> tensor<128x64xf32> loc(#loc11)
      %c64_i32_14 = arith.constant 64 : i32 loc(#loc12)
      %c64_i32_15 = arith.constant 64 : i32 loc(#loc12)
      %45 = arith.extsi %arg6 : i32 to i64 loc(#loc12)
      %46 = arith.extsi %c64_i32_15 : i32 to i64 loc(#loc12)
      %47 = arith.muli %45, %46 : i64 loc(#loc12)
      %c2147483647_i64_16 = arith.constant 2147483647 : i64 loc(#loc12)
      %c-2147483648_i64_17 = arith.constant -2147483648 : i64 loc(#loc12)
      %48 = arith.cmpi sle, %47, %c2147483647_i64_16 : i64 loc(#loc12)
      %49 = arith.cmpi sge, %47, %c-2147483648_i64_17 : i64 loc(#loc12)
      %50 = arith.andi %48, %49 : i1 loc(#loc12)
      %51 = arith.muli %arg6, %c64_i32_15 : i32 loc(#loc12)
      %c64_i32_18 = arith.constant 64 : i32 loc(#loc13)
      %c64_i32_19 = arith.constant 64 : i32 loc(#loc13)
      %52 = arith.extsi %1 : i32 to i64 loc(#loc13)
      %53 = arith.extsi %c64_i32_19 : i32 to i64 loc(#loc13)
      %54 = arith.muli %52, %53 : i64 loc(#loc13)
      %c2147483647_i64_20 = arith.constant 2147483647 : i64 loc(#loc13)
      %c-2147483648_i64_21 = arith.constant -2147483648 : i64 loc(#loc13)
      %55 = arith.cmpi sle, %54, %c2147483647_i64_20 : i64 loc(#loc13)
      %56 = arith.cmpi sge, %54, %c-2147483648_i64_21 : i64 loc(#loc13)
      %57 = arith.andi %55, %56 : i1 loc(#loc13)
      %58 = arith.muli %1, %c64_i32_19 : i32 loc(#loc13)
      %59 = tt.descriptor_load %5[%51, %58] : !tt.tensordesc<tensor<64x64xf32>> -> tensor<64x64xf32> loc(#loc14)
      %cst = arith.constant 0.000000e+00 : f32 loc(#loc15)
      %60 = tt.dot %44, %59, %arg7, inputPrecision = tf32 : tensor<128x64xf32> * tensor<64x64xf32> -> tensor<128x64xf32> loc(#loc15)
      scf.yield %60 : tensor<128x64xf32> loc(#loc16)
    } loc(#loc8)
    %c128_i32 = arith.constant 128 : i32 loc(#loc17)
    %c128_i32_2 = arith.constant 128 : i32 loc(#loc17)
    %16 = arith.extsi %0 : i32 to i64 loc(#loc17)
    %17 = arith.extsi %c128_i32_2 : i32 to i64 loc(#loc17)
    %18 = arith.muli %16, %17 : i64 loc(#loc17)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc17)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc17)
    %19 = arith.cmpi sle, %18, %c2147483647_i64 : i64 loc(#loc17)
    %20 = arith.cmpi sge, %18, %c-2147483648_i64 : i64 loc(#loc17)
    %21 = arith.andi %19, %20 : i1 loc(#loc17)
    %22 = arith.muli %0, %c128_i32_2 : i32 loc(#loc17)
    %c64_i32 = arith.constant 64 : i32 loc(#loc18)
    %c64_i32_3 = arith.constant 64 : i32 loc(#loc18)
    %23 = arith.extsi %1 : i32 to i64 loc(#loc18)
    %24 = arith.extsi %c64_i32_3 : i32 to i64 loc(#loc18)
    %25 = arith.muli %23, %24 : i64 loc(#loc18)
    %c2147483647_i64_4 = arith.constant 2147483647 : i64 loc(#loc18)
    %c-2147483648_i64_5 = arith.constant -2147483648 : i64 loc(#loc18)
    %26 = arith.cmpi sle, %25, %c2147483647_i64_4 : i64 loc(#loc18)
    %27 = arith.cmpi sge, %25, %c-2147483648_i64_5 : i64 loc(#loc18)
    %28 = arith.andi %26, %27 : i1 loc(#loc18)
    %29 = arith.muli %1, %c64_i32_3 : i32 loc(#loc18)
    tt.descriptor_store %7[%22, %29], %15 : !tt.tensordesc<tensor<128x64xf32>>, tensor<128x64xf32> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<128x64xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc22)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc22)
    tt.return %cst_0 : tensor<128x64xf32> loc(#loc23)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<128x64xf32> loc(#loc24)
    tt.return %0 : tensor<128x64xf32> loc(#loc24)
  } loc(#loc21)
  tt.func private @"triton.language.standard.cdiv__i32__(1,)cconstexpr_64_"(%arg0: i32 loc("/home/ubuntu/triton/python/triton/language/standard.py":31:0)) -> i32 attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc26)
    %c64_i32_0 = arith.constant 64 : i32 loc(#loc26)
    %0 = arith.extsi %arg0 : i32 to i64 loc(#loc26)
    %1 = arith.extsi %c64_i32_0 : i32 to i64 loc(#loc26)
    %2 = arith.addi %0, %1 : i64 loc(#loc26)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc26)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc26)
    %3 = arith.cmpi sle, %2, %c2147483647_i64 : i64 loc(#loc26)
    %4 = arith.cmpi sge, %2, %c-2147483648_i64 : i64 loc(#loc26)
    %5 = arith.andi %3, %4 : i1 loc(#loc26)
    %6 = arith.addi %arg0, %c64_i32_0 : i32 loc(#loc26)
    %c1_i32 = arith.constant 1 : i32 loc(#loc27)
    %c1_i32_1 = arith.constant 1 : i32 loc(#loc27)
    %7 = arith.extsi %6 : i32 to i64 loc(#loc27)
    %8 = arith.extsi %c1_i32_1 : i32 to i64 loc(#loc27)
    %9 = arith.subi %7, %8 : i64 loc(#loc27)
    %c2147483647_i64_2 = arith.constant 2147483647 : i64 loc(#loc27)
    %c-2147483648_i64_3 = arith.constant -2147483648 : i64 loc(#loc27)
    %10 = arith.cmpi sle, %9, %c2147483647_i64_2 : i64 loc(#loc27)
    %11 = arith.cmpi sge, %9, %c-2147483648_i64_3 : i64 loc(#loc27)
    %12 = arith.andi %10, %11 : i1 loc(#loc27)
    %13 = arith.subi %6, %c1_i32_1 : i32 loc(#loc27)
    %c64_i32_4 = arith.constant 64 : i32 loc(#loc28)
    %c64_i32_5 = arith.constant 64 : i32 loc(#loc28)
    %14 = arith.divsi %13, %c64_i32_5 : i32 loc(#loc28)
    tt.return %14 : i32 loc(#loc29)
  ^bb1:  // no predecessors
    %15 = ub.poison : i32 loc(#loc30)
    tt.return %15 : i32 loc(#loc30)
  } loc(#loc25)
} loc(#loc)
#loc1 = loc("/home/ubuntu/triton/matmul.py":14:26)
#loc2 = loc("/home/ubuntu/triton/matmul.py":15:26)
#loc3 = loc("/home/ubuntu/triton/matmul.py":18:8)
#loc4 = loc("/home/ubuntu/triton/matmul.py":24:8)
#loc5 = loc("/home/ubuntu/triton/matmul.py":30:8)
#loc6 = loc("/home/ubuntu/triton/matmul.py":35:27)
#loc7 = loc("/home/ubuntu/triton/matmul.py":37:30)
#loc8 = loc("/home/ubuntu/triton/matmul.py":37:19)
#loc9 = loc("/home/ubuntu/triton/matmul.py":38:33)
#loc10 = loc("/home/ubuntu/triton/matmul.py":38:51)
#loc11 = loc("/home/ubuntu/triton/matmul.py":38:24)
#loc12 = loc("/home/ubuntu/triton/matmul.py":39:29)
#loc13 = loc("/home/ubuntu/triton/matmul.py":39:51)
#loc14 = loc("/home/ubuntu/triton/matmul.py":39:24)
#loc15 = loc("/home/ubuntu/triton/matmul.py":40:32)
#loc16 = loc("/home/ubuntu/triton/matmul.py":40:8)
#loc17 = loc("/home/ubuntu/triton/matmul.py":43:26)
#loc18 = loc("/home/ubuntu/triton/matmul.py":43:48)
#loc19 = loc("/home/ubuntu/triton/matmul.py":43:63)
#loc20 = loc("/home/ubuntu/triton/matmul.py":43:4)
#loc21 = loc("/home/ubuntu/triton/python/triton/language/standard.py":117:0)
#loc22 = loc("/home/ubuntu/triton/python/triton/language/standard.py":126:31)
#loc23 = loc("/home/ubuntu/triton/python/triton/language/standard.py":126:11)
#loc24 = loc("/home/ubuntu/triton/python/triton/language/standard.py":126:4)
#loc26 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:16)
#loc27 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:22)
#loc28 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:28)
#loc29 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:11)
#loc30 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:4)
