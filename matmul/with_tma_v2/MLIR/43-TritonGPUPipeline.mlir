// Next run Pass --tritongpu-combine-tensor-select-and-if
// IR Dump After TritonGPUPipeline ('builtin.module' operation)
// Current Run Pass --tritongpu-pipeline

#blocked = #ttg.blocked<{sizePerThread = [1, 64], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [2, 2], order = [1, 0]}>
#loc = loc("/home/ubuntu/triton/matmul.py":6:0)
#shared = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared1 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 32}>
#shared2 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 32}>
#smem = #ttg.shared_memory
#tmem = #ttng.tensor_memory_encoding<blockM = 128, blockN = 64, unpacked = true>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:100", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel_make_tensor_desciptor(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0)) attributes {noinline = false} {
    %0 = ub.poison : !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc1)
    %1 = ub.poison : !ttg.memdesc<64x64xf32, #shared1, #smem> loc(#loc1)
    %2 = ub.poison : !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc1)
    %3 = ub.poison : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #blocked> loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c1_i64 = arith.constant 1 : i64 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %false = arith.constant false loc(#loc1)
    %4 = tt.get_program_id x : i32 loc(#loc2)
    %5 = tt.get_program_id y : i32 loc(#loc3)
    %6 = arith.extsi %arg4 : i32 to i64 loc(#loc4)
    %7 = tt.make_tensor_descriptor %arg0, [%arg3, %arg4], [%6, %c1_i64] : <f32>, <tensor<128x64xf32, #shared2>> loc(#loc4)
    %8 = arith.extsi %arg5 : i32 to i64 loc(#loc5)
    %9 = tt.make_tensor_descriptor %arg1, [%arg4, %arg5], [%8, %c1_i64] : <f32>, <tensor<64x64xf32, #shared2>> loc(#loc5)
    %10 = tt.make_tensor_descriptor %arg2, [%arg3, %arg5], [%8, %c1_i64] : <f32>, <tensor<128x64xf32, #shared2>> loc(#loc6)
    %11 = arith.addi %arg4, %c63_i32 : i32 loc(#loc19)
    %12 = arith.divsi %11, %c64_i32 : i32 loc(#loc20)
    %13 = arith.muli %4, %c128_i32 : i32 loc(#loc10)
    %14 = arith.muli %5, %c64_i32 : i32 loc(#loc11)
    %result, %token = ttng.tmem_alloc : () -> (!ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable>, !ttg.async.token) loc(#loc12)
    %15 = ttng.tmem_store %cst, %result[%token], %true : tensor<128x64xf32, #blocked> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable> loc(#loc12)
    %16 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared, #smem, mutable> loc(#loc13)
    %17 = ttg.memdesc_subview %16[%c0_i32] : !ttg.memdesc<2xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc13)
    ttng.init_barrier %17, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc13)
    %18 = ttg.memdesc_subview %16[%c1_i32] : !ttg.memdesc<2xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc13)
    ttng.init_barrier %18, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc13)
    %19 = ttg.local_alloc : () -> !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> loc(#loc14)
    %20 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xf32, #shared2, #smem, mutable> loc(#loc15)
    %21 = ttg.local_alloc : () -> !ttg.memdesc<3xi64, #shared, #smem, mutable> loc(#loc13)
    %22 = ttg.memdesc_subview %21[%c0_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    ttng.init_barrier %22, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    %23 = ttg.memdesc_subview %21[%c1_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    ttng.init_barrier %23, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    %24 = ttg.memdesc_subview %21[%c2_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    ttng.init_barrier %24, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    %25 = arith.cmpi sgt, %12, %c0_i32 : i32 loc(#loc13)
    %26 = ttg.memdesc_subview %21[%c0_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    ttng.barrier_expect %26, 49152, %25 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    %27 = ttg.memdesc_subview %19[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc14)
    ttng.async_tma_copy_global_to_local %7[%13, %c0_i32] %27, %26, %25 : !tt.tensordesc<tensor<128x64xf32, #shared2>>, !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc14)
    %28 = ttg.memdesc_subview %20[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared2, #smem, mutable, 3x64x64> loc(#loc15)
    ttng.async_tma_copy_global_to_local %9[%c0_i32, %14] %28, %26, %25 : !tt.tensordesc<tensor<64x64xf32, #shared2>>, !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> -> !ttg.memdesc<64x64xf32, #shared2, #smem, mutable, 3x64x64> loc(#loc15)
    %29 = arith.cmpi sgt, %12, %c1_i32 : i32 loc(#loc13)
    %30 = ttg.memdesc_subview %21[%c1_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    ttng.barrier_expect %30, 49152, %29 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    %31 = ttg.memdesc_subview %19[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc14)
    ttng.async_tma_copy_global_to_local %7[%13, %c64_i32] %31, %30, %29 : !tt.tensordesc<tensor<128x64xf32, #shared2>>, !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc14)
    %32 = ttg.memdesc_subview %20[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared2, #smem, mutable, 3x64x64> loc(#loc15)
    ttng.async_tma_copy_global_to_local %9[%c64_i32, %14] %32, %30, %29 : !tt.tensordesc<tensor<64x64xf32, #shared2>>, !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> -> !ttg.memdesc<64x64xf32, #shared2, #smem, mutable, 3x64x64> loc(#loc15)
    %33 = arith.cmpi sgt, %12, %c2_i32 : i32 loc(#loc13)
    %34 = ttg.memdesc_subview %21[%c0_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    ttng.wait_barrier %34, %c0_i32, %25 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    %35 = ttg.memdesc_subview %20[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared2, #smem, mutable, 3x64x64> loc(#loc15)
    %36 = ttg.local_load %35 : !ttg.memdesc<64x64xf32, #shared2, #smem, mutable, 3x64x64> -> tensor<64x64xf32, #blocked1> loc(#loc15)
    %37 = ttg.memdesc_subview %19[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc14)
    %38 = ttg.local_alloc %36 : (tensor<64x64xf32, #blocked1>) -> !ttg.memdesc<64x64xf32, #shared1, #smem> loc(#loc15)
    %39 = ttg.memdesc_subview %16[%c0_i32] : !ttg.memdesc<2xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc13)
    %40 = ttng.tc_gen5_mma %37, %38, %result[%15], %false, %25, %39[%true] : !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem>, !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable>, !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc12)
    %41 = arith.select %25, %40, %15 : !ttg.async.token loc(#loc13)
    %42 = ttg.memdesc_subview %21[%c2_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    ttng.barrier_expect %42, 49152, %33 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    %43 = ttg.memdesc_subview %19[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc14)
    ttng.async_tma_copy_global_to_local %7[%13, %c128_i32] %43, %42, %33 : !tt.tensordesc<tensor<128x64xf32, #shared2>>, !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc14)
    %44 = ttg.memdesc_subview %20[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared2, #smem, mutable, 3x64x64> loc(#loc15)
    ttng.async_tma_copy_global_to_local %9[%c128_i32, %14] %44, %42, %33 : !tt.tensordesc<tensor<64x64xf32, #shared2>>, !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> -> !ttg.memdesc<64x64xf32, #shared2, #smem, mutable, 3x64x64> loc(#loc15)
    %45 = arith.subi %12, %c1_i32 : i32 loc(#loc13)
    %46:13 = scf.for %arg6 = %c0_i32 to %45 step %c1_i32 iter_args(%arg7 = %false, %arg8 = %41, %arg9 = %c0_i32, %arg10 = %c1_i32, %arg11 = %c2_i32, %arg12 = %c0_i32, %arg13 = %c0_i32, %arg14 = %c3_i32, %arg15 = %c3_i32, %arg16 = %39, %arg17 = %c0_i32, %arg18 = %37, %arg19 = %38) -> (i1, !ttg.async.token, i32, i32, i32, i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared, #smem, mutable, 2>, i32, !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem>)  : i32 {
      %55 = arith.subi %12, %c3_i32 : i32 loc(#loc13)
      %56 = arith.cmpi slt, %arg6, %55 : i32 loc(#loc13)
      %57 = arith.addi %arg12, %c1_i32 : i32 loc(#loc13)
      %58 = arith.cmpi sge, %57, %arg14 : i32 loc(#loc13)
      %59 = arith.select %58, %c0_i32, %57 : i32 loc(#loc13)
      %60 = arith.xori %arg13, %c1_i32 : i32 loc(#loc13)
      %61 = arith.select %58, %60, %arg13 : i32 loc(#loc13)
      %62 = ttg.memdesc_subview %21[%59] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
      ttng.wait_barrier %62, %61, %true : !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
      %63 = ttg.memdesc_subview %20[%59, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared2, #smem, mutable, 3x64x64> loc(#loc15)
      %64 = ttg.local_load %63 : !ttg.memdesc<64x64xf32, #shared2, #smem, mutable, 3x64x64> -> tensor<64x64xf32, #blocked1> loc(#loc15)
      %65 = ttg.memdesc_subview %19[%59, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc14)
      %66 = ttg.local_alloc %64 : (tensor<64x64xf32, #blocked1>) -> !ttg.memdesc<64x64xf32, #shared1, #smem> loc(#loc15)
      %67 = ttg.memdesc_subview %16[%arg10] : !ttg.memdesc<2xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc13)
      %68 = ttng.tc_gen5_mma %65, %66, %result[%arg8], %true, %true, %67[%true] : !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem>, !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable>, !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc12)
      ttng.wait_barrier %arg16, %arg17 deps %arg18, %arg19 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 2>, !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem> loc(#loc12)
      %69 = arith.xori %arg9, %c1_i32 : i32 loc(#loc12)
      %70 = arith.addi %arg10, %c1_i32 : i32 loc(#loc12)
      %71 = arith.cmpi sge, %70, %c2_i32 : i32 loc(#loc12)
      %72 = arith.select %71, %c0_i32, %70 : i32 loc(#loc12)
      %73 = arith.select %71, %69, %arg9 : i32 loc(#loc12)
      %74 = arith.addi %arg11, %c1_i32 : i32 loc(#loc13)
      %75 = arith.cmpi sge, %74, %c3_i32 : i32 loc(#loc13)
      %76 = arith.select %75, %c0_i32, %74 : i32 loc(#loc13)
      %77 = arith.addi %arg6, %c3_i32 : i32 loc(#loc13)
      %78 = arith.muli %77, %c64_i32 : i32 loc(#loc16)
      %79 = ttg.memdesc_subview %21[%76] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
      ttng.barrier_expect %79, 49152, %56 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
      %80 = ttg.memdesc_subview %19[%76, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc14)
      ttng.async_tma_copy_global_to_local %7[%13, %78] %80, %79, %56 : !tt.tensordesc<tensor<128x64xf32, #shared2>>, !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc14)
      %81 = ttg.memdesc_subview %20[%76, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared2, #smem, mutable, 3x64x64> loc(#loc15)
      ttng.async_tma_copy_global_to_local %9[%78, %14] %81, %79, %56 : !tt.tensordesc<tensor<64x64xf32, #shared2>>, !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> -> !ttg.memdesc<64x64xf32, #shared2, #smem, mutable, 3x64x64> loc(#loc15)
      scf.yield %true, %68, %73, %72, %76, %59, %61, %arg15, %c3_i32, %67, %arg9, %65, %66 : i1, !ttg.async.token, i32, i32, i32, i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared, #smem, mutable, 2>, i32, !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem> loc(#loc13)
    } loc(#loc13)
    %47 = arith.cmpi sgt, %12, %c0_i32 : i32 loc(#loc13)
    %48:13 = scf.if %47 -> (i1, !ttg.async.token, i32, i32, i32, i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared, #smem, mutable, 2>, i32, !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem>) {
      ttng.wait_barrier %46#9, %46#10 deps %46#11, %46#12 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 2>, !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem> loc(#loc12)
      scf.yield %true, %46#1, %3, %3, %3, %3, %3, %46#8, %c3_i32, %0, %46#2, %2, %1 : i1, !ttg.async.token, i32, i32, i32, i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared, #smem, mutable, 2>, i32, !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem> loc(#loc13)
    } else {
      scf.yield %46#0, %46#1, %46#2, %46#3, %46#4, %46#5, %46#6, %46#7, %46#8, %46#9, %46#10, %46#11, %46#12 : i1, !ttg.async.token, i32, i32, i32, i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared, #smem, mutable, 2>, i32, !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem> loc(#loc13)
    } loc(#loc13)
    %49 = ttg.memdesc_subview %21[%c0_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    ttng.inval_barrier %49 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    %50 = ttg.memdesc_subview %21[%c1_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    ttng.inval_barrier %50 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    %51 = ttg.memdesc_subview %21[%c2_i32] : !ttg.memdesc<3xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    ttng.inval_barrier %51 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 3> loc(#loc13)
    ttg.local_dealloc %21 : !ttg.memdesc<3xi64, #shared, #smem, mutable> loc(#loc13)
    ttg.local_dealloc %20 : !ttg.memdesc<3x64x64xf32, #shared2, #smem, mutable> loc(#loc13)
    ttg.local_dealloc %19 : !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> loc(#loc13)
    %52 = ttg.memdesc_subview %16[%c0_i32] : !ttg.memdesc<2xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc13)
    ttng.inval_barrier %52 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc13)
    %53 = ttg.memdesc_subview %16[%c1_i32] : !ttg.memdesc<2xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc13)
    ttng.inval_barrier %53 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc13)
    ttg.local_dealloc %16 : !ttg.memdesc<2xi64, #shared, #smem, mutable> loc(#loc13)
    %result_0, %token_1 = ttng.tmem_load %result[%48#1] : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable> -> tensor<128x64xf32, #blocked> loc(#loc12)
    %54 = ttg.convert_layout %result_0 : tensor<128x64xf32, #blocked> -> tensor<128x64xf32, #blocked1> loc(#loc13)
    tt.descriptor_store %10[%13, %14], %54 : !tt.tensordesc<tensor<128x64xf32, #shared2>>, tensor<128x64xf32, #blocked1> loc(#loc17)
    tt.return loc(#loc18)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/triton/matmul.py":14:26)
#loc3 = loc("/home/ubuntu/triton/matmul.py":15:26)
#loc4 = loc("/home/ubuntu/triton/matmul.py":18:8)
#loc5 = loc("/home/ubuntu/triton/matmul.py":24:8)
#loc6 = loc("/home/ubuntu/triton/matmul.py":30:8)
#loc7 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:22)
#loc8 = loc("/home/ubuntu/triton/matmul.py":37:30)
#loc9 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:28)
#loc10 = loc("/home/ubuntu/triton/matmul.py":38:33)
#loc11 = loc("/home/ubuntu/triton/matmul.py":39:51)
#loc12 = loc("/home/ubuntu/triton/matmul.py":40:32)
#loc13 = loc("/home/ubuntu/triton/matmul.py":37:19)
#loc14 = loc("/home/ubuntu/triton/matmul.py":38:24)
#loc15 = loc("/home/ubuntu/triton/matmul.py":39:24)
#loc16 = loc("/home/ubuntu/triton/matmul.py":38:51)
#loc17 = loc("/home/ubuntu/triton/matmul.py":43:63)
#loc18 = loc("/home/ubuntu/triton/matmul.py":43:4)
#loc19 = loc(callsite(#loc7 at #loc8))
#loc20 = loc(callsite(#loc9 at #loc8))
