// Next run Pass --canonicalize
// IR Dump After Inliner ('builtin.module' operation)
// Current Run Pass --inline

#loc = loc("/home/ubuntu/triton/matmul.py":6:0)
module {
  tt.func public @matrix_multiplication_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.get_program_id y : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc3)
    %c128_i32_0 = arith.constant 128 : i32 loc(#loc3)
    %2 = arith.extsi %1 : i32 to i64 loc(#loc3)
    %3 = arith.extsi %c128_i32_0 : i32 to i64 loc(#loc3)
    %4 = arith.muli %2, %3 : i64 loc(#loc3)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc3)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc3)
    %5 = arith.cmpi sle, %4, %c2147483647_i64 : i64 loc(#loc3)
    %6 = arith.cmpi sge, %4, %c-2147483648_i64 : i64 loc(#loc3)
    %7 = arith.andi %5, %6 : i1 loc(#loc3)
    %8 = arith.muli %1, %c128_i32_0 : i32 loc(#loc3)
    %9 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc4)
    %10 = tt.splat %8 : i32 -> tensor<128xi32> loc(#loc5)
    %11 = arith.extsi %10 : tensor<128xi32> to tensor<128xi64> loc(#loc5)
    %12 = arith.extsi %9 : tensor<128xi32> to tensor<128xi64> loc(#loc5)
    %13 = arith.addi %11, %12 : tensor<128xi64> loc(#loc5)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc5)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc5)
    %cst = arith.constant dense<2147483647> : tensor<128xi64> loc(#loc5)
    %14 = arith.cmpi sle, %13, %cst : tensor<128xi64> loc(#loc5)
    %cst_3 = arith.constant dense<-2147483648> : tensor<128xi64> loc(#loc5)
    %15 = arith.cmpi sge, %13, %cst_3 : tensor<128xi64> loc(#loc5)
    %16 = arith.andi %14, %15 : tensor<128xi1> loc(#loc5)
    %17 = arith.addi %10, %9 : tensor<128xi32> loc(#loc5)
    %c64_i32 = arith.constant 64 : i32 loc(#loc6)
    %c64_i32_4 = arith.constant 64 : i32 loc(#loc6)
    %18 = arith.extsi %0 : i32 to i64 loc(#loc6)
    %19 = arith.extsi %c64_i32_4 : i32 to i64 loc(#loc6)
    %20 = arith.muli %18, %19 : i64 loc(#loc6)
    %c2147483647_i64_5 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_6 = arith.constant -2147483648 : i64 loc(#loc6)
    %21 = arith.cmpi sle, %20, %c2147483647_i64_5 : i64 loc(#loc6)
    %22 = arith.cmpi sge, %20, %c-2147483648_i64_6 : i64 loc(#loc6)
    %23 = arith.andi %21, %22 : i1 loc(#loc6)
    %24 = arith.muli %0, %c64_i32_4 : i32 loc(#loc6)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc7)
    %26 = tt.splat %24 : i32 -> tensor<64xi32> loc(#loc8)
    %27 = arith.extsi %26 : tensor<64xi32> to tensor<64xi64> loc(#loc8)
    %28 = arith.extsi %25 : tensor<64xi32> to tensor<64xi64> loc(#loc8)
    %29 = arith.addi %27, %28 : tensor<64xi64> loc(#loc8)
    %c2147483647_i64_7 = arith.constant 2147483647 : i64 loc(#loc8)
    %c-2147483648_i64_8 = arith.constant -2147483648 : i64 loc(#loc8)
    %cst_9 = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc8)
    %30 = arith.cmpi sle, %29, %cst_9 : tensor<64xi64> loc(#loc8)
    %cst_10 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc8)
    %31 = arith.cmpi sge, %29, %cst_10 : tensor<64xi64> loc(#loc8)
    %32 = arith.andi %30, %31 : tensor<64xi1> loc(#loc8)
    %33 = arith.addi %26, %25 : tensor<64xi32> loc(#loc8)
    %34 = tt.expand_dims %17 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc9)
    %35 = tt.splat %arg6 : i32 -> tensor<128x1xi32> loc(#loc10)
    %36 = arith.extsi %34 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc10)
    %37 = arith.extsi %35 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc10)
    %38 = arith.muli %36, %37 : tensor<128x1xi64> loc(#loc10)
    %c2147483647_i64_11 = arith.constant 2147483647 : i64 loc(#loc10)
    %c-2147483648_i64_12 = arith.constant -2147483648 : i64 loc(#loc10)
    %cst_13 = arith.constant dense<2147483647> : tensor<128x1xi64> loc(#loc10)
    %39 = arith.cmpi sle, %38, %cst_13 : tensor<128x1xi64> loc(#loc10)
    %cst_14 = arith.constant dense<-2147483648> : tensor<128x1xi64> loc(#loc10)
    %40 = arith.cmpi sge, %38, %cst_14 : tensor<128x1xi64> loc(#loc10)
    %41 = arith.andi %39, %40 : tensor<128x1xi1> loc(#loc10)
    %42 = arith.muli %34, %35 : tensor<128x1xi32> loc(#loc10)
    %43 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>> loc(#loc11)
    %44 = tt.addptr %43, %42 : tensor<128x1x!tt.ptr<f32>>, tensor<128x1xi32> loc(#loc11)
    %45 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc12)
    %c1_i32 = arith.constant 1 : i32 loc(#loc13)
    %c1_i32_15 = arith.constant 1 : i32 loc(#loc13)
    %cst_16 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc13)
    %46 = arith.extsi %45 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc13)
    %47 = arith.extsi %cst_16 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc13)
    %48 = arith.muli %46, %47 : tensor<1x64xi64> loc(#loc13)
    %c2147483647_i64_17 = arith.constant 2147483647 : i64 loc(#loc13)
    %c-2147483648_i64_18 = arith.constant -2147483648 : i64 loc(#loc13)
    %cst_19 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc13)
    %49 = arith.cmpi sle, %48, %cst_19 : tensor<1x64xi64> loc(#loc13)
    %cst_20 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc13)
    %50 = arith.cmpi sge, %48, %cst_20 : tensor<1x64xi64> loc(#loc13)
    %51 = arith.andi %49, %50 : tensor<1x64xi1> loc(#loc13)
    %52 = arith.muli %45, %cst_16 : tensor<1x64xi32> loc(#loc13)
    %53 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc14)
    %54 = tt.addptr %53, %52 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc14)
    %55 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<128x64xf32> loc(#loc15)
    %c0_i32 = arith.constant 0 : i32 loc(#loc16)
    %c1_i32_21 = arith.constant 1 : i32 loc(#loc16)
    %56 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc16)
    %57 = arith.bitcast %arg4 : i32 to i32 loc(#loc16)
    %58 = arith.bitcast %c1_i32_21 : i32 to i32 loc(#loc16)
    %59 = ub.poison : i32 loc(#loc16)
    %60 = scf.for %arg9 = %56 to %57 step %58 iter_args(%arg10 = %55) -> (tensor<128x64xf32>)  : i32 {
      %c1_i32_49 = arith.constant 1 : i32 loc(#loc17)
      %c1_i32_50 = arith.constant 1 : i32 loc(#loc17)
      %124 = arith.extsi %arg9 : i32 to i64 loc(#loc17)
      %125 = arith.extsi %c1_i32_50 : i32 to i64 loc(#loc17)
      %126 = arith.muli %124, %125 : i64 loc(#loc17)
      %c2147483647_i64_51 = arith.constant 2147483647 : i64 loc(#loc17)
      %c-2147483648_i64_52 = arith.constant -2147483648 : i64 loc(#loc17)
      %127 = arith.cmpi sle, %126, %c2147483647_i64_51 : i64 loc(#loc17)
      %128 = arith.cmpi sge, %126, %c-2147483648_i64_52 : i64 loc(#loc17)
      %129 = arith.andi %127, %128 : i1 loc(#loc17)
      %130 = arith.muli %arg9, %c1_i32_50 : i32 loc(#loc17)
      %131 = tt.splat %130 : i32 -> tensor<128x1xi32> loc(#loc18)
      %132 = tt.addptr %44, %131 : tensor<128x1x!tt.ptr<f32>>, tensor<128x1xi32> loc(#loc18)
      %133 = tt.load %132 : tensor<128x1x!tt.ptr<f32>> loc(#loc19)
      %134 = arith.extsi %arg9 : i32 to i64 loc(#loc20)
      %135 = arith.extsi %arg7 : i32 to i64 loc(#loc20)
      %136 = arith.muli %134, %135 : i64 loc(#loc20)
      %c2147483647_i64_53 = arith.constant 2147483647 : i64 loc(#loc20)
      %c-2147483648_i64_54 = arith.constant -2147483648 : i64 loc(#loc20)
      %137 = arith.cmpi sle, %136, %c2147483647_i64_53 : i64 loc(#loc20)
      %138 = arith.cmpi sge, %136, %c-2147483648_i64_54 : i64 loc(#loc20)
      %139 = arith.andi %137, %138 : i1 loc(#loc20)
      %140 = arith.muli %arg9, %arg7 : i32 loc(#loc20)
      %141 = tt.splat %140 : i32 -> tensor<1x64xi32> loc(#loc21)
      %142 = tt.addptr %54, %141 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc21)
      %143 = tt.load %142 : tensor<1x64x!tt.ptr<f32>> loc(#loc22)
      %144 = tt.broadcast %133 : tensor<128x1xf32> -> tensor<128x64xf32> loc(#loc23)
      %145 = tt.broadcast %143 : tensor<1x64xf32> -> tensor<128x64xf32> loc(#loc23)
      %146 = arith.mulf %144, %145 : tensor<128x64xf32> loc(#loc23)
      %147 = arith.addf %arg10, %146 : tensor<128x64xf32> loc(#loc24)
      scf.yield %147 : tensor<128x64xf32> loc(#loc25)
    } loc(#loc16)
    %61 = tt.expand_dims %17 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc26)
    %62 = tt.splat %arg8 : i32 -> tensor<128x1xi32> loc(#loc27)
    %63 = arith.extsi %61 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc27)
    %64 = arith.extsi %62 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc27)
    %65 = arith.muli %63, %64 : tensor<128x1xi64> loc(#loc27)
    %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc27)
    %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc27)
    %cst_24 = arith.constant dense<2147483647> : tensor<128x1xi64> loc(#loc27)
    %66 = arith.cmpi sle, %65, %cst_24 : tensor<128x1xi64> loc(#loc27)
    %cst_25 = arith.constant dense<-2147483648> : tensor<128x1xi64> loc(#loc27)
    %67 = arith.cmpi sge, %65, %cst_25 : tensor<128x1xi64> loc(#loc27)
    %68 = arith.andi %66, %67 : tensor<128x1xi1> loc(#loc27)
    %69 = arith.muli %61, %62 : tensor<128x1xi32> loc(#loc27)
    %70 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>> loc(#loc28)
    %71 = tt.addptr %70, %69 : tensor<128x1x!tt.ptr<f32>>, tensor<128x1xi32> loc(#loc28)
    %72 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc29)
    %c1_i32_26 = arith.constant 1 : i32 loc(#loc30)
    %c1_i32_27 = arith.constant 1 : i32 loc(#loc30)
    %cst_28 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc30)
    %73 = arith.extsi %72 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc30)
    %74 = arith.extsi %cst_28 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc30)
    %75 = arith.muli %73, %74 : tensor<1x64xi64> loc(#loc30)
    %c2147483647_i64_29 = arith.constant 2147483647 : i64 loc(#loc30)
    %c-2147483648_i64_30 = arith.constant -2147483648 : i64 loc(#loc30)
    %cst_31 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc30)
    %76 = arith.cmpi sle, %75, %cst_31 : tensor<1x64xi64> loc(#loc30)
    %cst_32 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc30)
    %77 = arith.cmpi sge, %75, %cst_32 : tensor<1x64xi64> loc(#loc30)
    %78 = arith.andi %76, %77 : tensor<1x64xi1> loc(#loc30)
    %79 = arith.muli %72, %cst_28 : tensor<1x64xi32> loc(#loc30)
    %80 = tt.broadcast %71 : tensor<128x1x!tt.ptr<f32>> -> tensor<128x64x!tt.ptr<f32>> loc(#loc31)
    %81 = tt.broadcast %79 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc31)
    %82 = tt.addptr %80, %81 : tensor<128x64x!tt.ptr<f32>>, tensor<128x64xi32> loc(#loc31)
    %c128_i32_33 = arith.constant 128 : i32 loc(#loc32)
    %c128_i32_34 = arith.constant 128 : i32 loc(#loc32)
    %83 = arith.extsi %1 : i32 to i64 loc(#loc32)
    %84 = arith.extsi %c128_i32_34 : i32 to i64 loc(#loc32)
    %85 = arith.muli %83, %84 : i64 loc(#loc32)
    %c2147483647_i64_35 = arith.constant 2147483647 : i64 loc(#loc32)
    %c-2147483648_i64_36 = arith.constant -2147483648 : i64 loc(#loc32)
    %86 = arith.cmpi sle, %85, %c2147483647_i64_35 : i64 loc(#loc32)
    %87 = arith.cmpi sge, %85, %c-2147483648_i64_36 : i64 loc(#loc32)
    %88 = arith.andi %86, %87 : i1 loc(#loc32)
    %89 = arith.muli %1, %c128_i32_34 : i32 loc(#loc32)
    %90 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc33)
    %91 = tt.splat %89 : i32 -> tensor<128xi32> loc(#loc34)
    %92 = arith.extsi %91 : tensor<128xi32> to tensor<128xi64> loc(#loc34)
    %93 = arith.extsi %90 : tensor<128xi32> to tensor<128xi64> loc(#loc34)
    %94 = arith.addi %92, %93 : tensor<128xi64> loc(#loc34)
    %c2147483647_i64_37 = arith.constant 2147483647 : i64 loc(#loc34)
    %c-2147483648_i64_38 = arith.constant -2147483648 : i64 loc(#loc34)
    %cst_39 = arith.constant dense<2147483647> : tensor<128xi64> loc(#loc34)
    %95 = arith.cmpi sle, %94, %cst_39 : tensor<128xi64> loc(#loc34)
    %cst_40 = arith.constant dense<-2147483648> : tensor<128xi64> loc(#loc34)
    %96 = arith.cmpi sge, %94, %cst_40 : tensor<128xi64> loc(#loc34)
    %97 = arith.andi %95, %96 : tensor<128xi1> loc(#loc34)
    %98 = arith.addi %91, %90 : tensor<128xi32> loc(#loc34)
    %c64_i32_41 = arith.constant 64 : i32 loc(#loc35)
    %c64_i32_42 = arith.constant 64 : i32 loc(#loc35)
    %99 = arith.extsi %0 : i32 to i64 loc(#loc35)
    %100 = arith.extsi %c64_i32_42 : i32 to i64 loc(#loc35)
    %101 = arith.muli %99, %100 : i64 loc(#loc35)
    %c2147483647_i64_43 = arith.constant 2147483647 : i64 loc(#loc35)
    %c-2147483648_i64_44 = arith.constant -2147483648 : i64 loc(#loc35)
    %102 = arith.cmpi sle, %101, %c2147483647_i64_43 : i64 loc(#loc35)
    %103 = arith.cmpi sge, %101, %c-2147483648_i64_44 : i64 loc(#loc35)
    %104 = arith.andi %102, %103 : i1 loc(#loc35)
    %105 = arith.muli %0, %c64_i32_42 : i32 loc(#loc35)
    %106 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc36)
    %107 = tt.splat %105 : i32 -> tensor<64xi32> loc(#loc37)
    %108 = arith.extsi %107 : tensor<64xi32> to tensor<64xi64> loc(#loc37)
    %109 = arith.extsi %106 : tensor<64xi32> to tensor<64xi64> loc(#loc37)
    %110 = arith.addi %108, %109 : tensor<64xi64> loc(#loc37)
    %c2147483647_i64_45 = arith.constant 2147483647 : i64 loc(#loc37)
    %c-2147483648_i64_46 = arith.constant -2147483648 : i64 loc(#loc37)
    %cst_47 = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc37)
    %111 = arith.cmpi sle, %110, %cst_47 : tensor<64xi64> loc(#loc37)
    %cst_48 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc37)
    %112 = arith.cmpi sge, %110, %cst_48 : tensor<64xi64> loc(#loc37)
    %113 = arith.andi %111, %112 : tensor<64xi1> loc(#loc37)
    %114 = arith.addi %107, %106 : tensor<64xi32> loc(#loc37)
    %115 = tt.expand_dims %98 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc38)
    %116 = tt.splat %arg3 : i32 -> tensor<128x1xi32> loc(#loc39)
    %117 = arith.cmpi slt, %115, %116 : tensor<128x1xi32> loc(#loc39)
    %118 = tt.expand_dims %114 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc40)
    %119 = tt.splat %arg5 : i32 -> tensor<1x64xi32> loc(#loc41)
    %120 = arith.cmpi slt, %118, %119 : tensor<1x64xi32> loc(#loc41)
    %121 = tt.broadcast %117 : tensor<128x1xi1> -> tensor<128x64xi1> loc(#loc42)
    %122 = tt.broadcast %120 : tensor<1x64xi1> -> tensor<128x64xi1> loc(#loc42)
    %123 = arith.andi %121, %122 : tensor<128x64xi1> loc(#loc42)
    tt.store %82, %60, %123 : tensor<128x64x!tt.ptr<f32>> loc(#loc43)
    tt.return loc(#loc44)
  } loc(#loc)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<128x64xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc46)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc46)
    tt.return %cst_0 : tensor<128x64xf32> loc(#loc47)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<128x64xf32> loc(#loc48)
    tt.return %0 : tensor<128x64xf32> loc(#loc48)
  } loc(#loc45)
} loc(#loc)
#loc1 = loc("/home/ubuntu/triton/matmul.py":17:26)
#loc2 = loc("/home/ubuntu/triton/matmul.py":18:26)
#loc3 = loc("/home/ubuntu/triton/matmul.py":20:21)
#loc4 = loc("/home/ubuntu/triton/matmul.py":20:49)
#loc5 = loc("/home/ubuntu/triton/matmul.py":20:36)
#loc6 = loc("/home/ubuntu/triton/matmul.py":21:21)
#loc7 = loc("/home/ubuntu/triton/matmul.py":21:49)
#loc8 = loc("/home/ubuntu/triton/matmul.py":21:36)
#loc9 = loc("/home/ubuntu/triton/matmul.py":24:28)
#loc10 = loc("/home/ubuntu/triton/matmul.py":24:39)
#loc11 = loc("/home/ubuntu/triton/matmul.py":24:21)
#loc12 = loc("/home/ubuntu/triton/matmul.py":25:28)
#loc13 = loc("/home/ubuntu/triton/matmul.py":25:39)
#loc14 = loc("/home/ubuntu/triton/matmul.py":25:21)
#loc15 = loc("/home/ubuntu/triton/matmul.py":27:27)
#loc16 = loc("/home/ubuntu/triton/matmul.py":30:19)
#loc17 = loc("/home/ubuntu/triton/matmul.py":32:33)
#loc18 = loc("/home/ubuntu/triton/matmul.py":32:29)
#loc19 = loc("/home/ubuntu/triton/matmul.py":32:20)
#loc20 = loc("/home/ubuntu/triton/matmul.py":33:33)
#loc21 = loc("/home/ubuntu/triton/matmul.py":33:29)
#loc22 = loc("/home/ubuntu/triton/matmul.py":33:20)
#loc23 = loc("/home/ubuntu/triton/matmul.py":34:27)
#loc24 = loc("/home/ubuntu/triton/matmul.py":34:23)
#loc25 = loc("/home/ubuntu/triton/matmul.py":34:8)
#loc26 = loc("/home/ubuntu/triton/matmul.py":37:28)
#loc27 = loc("/home/ubuntu/triton/matmul.py":37:39)
#loc28 = loc("/home/ubuntu/triton/matmul.py":37:21)
#loc29 = loc("/home/ubuntu/triton/matmul.py":37:58)
#loc30 = loc("/home/ubuntu/triton/matmul.py":37:69)
#loc31 = loc("/home/ubuntu/triton/matmul.py":37:51)
#loc32 = loc("/home/ubuntu/triton/matmul.py":38:22)
#loc33 = loc("/home/ubuntu/triton/matmul.py":38:50)
#loc34 = loc("/home/ubuntu/triton/matmul.py":38:37)
#loc35 = loc("/home/ubuntu/triton/matmul.py":39:22)
#loc36 = loc("/home/ubuntu/triton/matmul.py":39:50)
#loc37 = loc("/home/ubuntu/triton/matmul.py":39:37)
#loc38 = loc("/home/ubuntu/triton/matmul.py":40:22)
#loc39 = loc("/home/ubuntu/triton/matmul.py":40:33)
#loc40 = loc("/home/ubuntu/triton/matmul.py":40:47)
#loc41 = loc("/home/ubuntu/triton/matmul.py":40:58)
#loc42 = loc("/home/ubuntu/triton/matmul.py":40:39)
#loc43 = loc("/home/ubuntu/triton/matmul.py":41:21)
#loc44 = loc("/home/ubuntu/triton/matmul.py":41:4)
#loc45 = loc("/home/ubuntu/triton/python/triton/language/standard.py":117:0)
#loc46 = loc("/home/ubuntu/triton/python/triton/language/standard.py":126:31)
#loc47 = loc("/home/ubuntu/triton/python/triton/language/standard.py":126:11)
#loc48 = loc("/home/ubuntu/triton/python/triton/language/standard.py":126:4)
