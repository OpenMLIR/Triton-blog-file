// Next run Pass --triton-nvidia-gpu-proxy-fence-insertion
// IR Dump After TritonGPUGlobalScratchAllocationPass ('builtin.module' operation)
// Current Run Pass --tritongpu-global-scratch-memory-allocation

#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/ubuntu/triton/matmul.py":6:0)
#loc1 = loc(unknown)
#loc15 = loc("/home/ubuntu/triton/matmul.py":30:19)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 34816 : i32, ttg.target = "cuda:100", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @matrix_multiplication_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0)) attributes {noinline = false, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %1, %c128_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %4 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %5 = tt.splat %2 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %6 = tt.splat %2 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = arith.addi %5, %3 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %8 = arith.addi %6, %4 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.muli %0, %c64_i32 : i32 loc(#loc7)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %11 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %12 = tt.splat %9 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %13 = tt.splat %9 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %14 = arith.addi %12, %10 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %15 = arith.addi %13, %11 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %16 = tt.expand_dims %7 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc10)
    %18 = tt.splat %arg6 : i32 -> tensor<128x1xi32, #blocked> loc(#loc11)
    %19 = arith.muli %17, %18 : tensor<128x1xi32, #blocked> loc(#loc11)
    %20 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %21 = tt.addptr %20, %19 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc12)
    %22 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc13)
    %23 = tt.expand_dims %15 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc13)
    %24 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc14)
    %25 = tt.addptr %24, %22 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc14)
    cf.br ^bb1(%c0_i32, %cst : i32, tensor<128x64xf32, #blocked>) loc(#loc15)
  ^bb1(%26: i32 loc("/home/ubuntu/triton/matmul.py":30:19), %27: tensor<128x64xf32, #blocked> loc(unknown)):  // 2 preds: ^bb0, ^bb2
    %28 = arith.cmpi slt, %26, %arg4 : i32 loc(#loc15)
    cf.cond_br %28, ^bb2, ^bb3 loc(#loc15)
  ^bb2:  // pred: ^bb1
    %29 = tt.splat %26 : i32 -> tensor<128x1xi32, #blocked> loc(#loc16)
    %30 = tt.addptr %21, %29 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc16)
    %31 = tt.load %30 : tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %32 = arith.muli %26, %arg7 : i32 loc(#loc18)
    %33 = tt.splat %32 : i32 -> tensor<1x64xi32, #blocked> loc(#loc19)
    %34 = tt.addptr %25, %33 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc19)
    %35 = tt.load %34 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc20)
    %36 = tt.broadcast %31 : tensor<128x1xf32, #blocked> -> tensor<128x64xf32, #blocked> loc(#loc21)
    %37 = tt.broadcast %35 : tensor<1x64xf32, #blocked> -> tensor<128x64xf32, #blocked> loc(#loc21)
    %38 = arith.mulf %36, %37 : tensor<128x64xf32, #blocked> loc(#loc21)
    %39 = arith.addf %27, %38 : tensor<128x64xf32, #blocked> loc(#loc22)
    %40 = arith.addi %26, %c1_i32 : i32 loc(#loc15)
    cf.br ^bb1(%40, %39 : i32, tensor<128x64xf32, #blocked>) loc(#loc15)
  ^bb3:  // pred: ^bb1
    %41 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc23)
    %42 = arith.muli %16, %41 : tensor<128x1xi32, #blocked1> loc(#loc23)
    %43 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc24)
    %44 = tt.addptr %43, %42 : tensor<128x1x!tt.ptr<f32>, #blocked1>, tensor<128x1xi32, #blocked1> loc(#loc24)
    %45 = tt.broadcast %44 : tensor<128x1x!tt.ptr<f32>, #blocked1> -> tensor<128x64x!tt.ptr<f32>, #blocked1> loc(#loc25)
    %46 = tt.broadcast %23 : tensor<1x64xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc25)
    %47 = tt.addptr %45, %46 : tensor<128x64x!tt.ptr<f32>, #blocked1>, tensor<128x64xi32, #blocked1> loc(#loc25)
    %48 = tt.splat %arg3 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc26)
    %49 = arith.cmpi slt, %16, %48 : tensor<128x1xi32, #blocked1> loc(#loc26)
    %50 = tt.splat %arg5 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc27)
    %51 = arith.cmpi slt, %23, %50 : tensor<1x64xi32, #blocked1> loc(#loc27)
    %52 = tt.broadcast %49 : tensor<128x1xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc28)
    %53 = tt.broadcast %51 : tensor<1x64xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc28)
    %54 = arith.andi %52, %53 : tensor<128x64xi1, #blocked1> loc(#loc28)
    %55 = ttg.convert_layout %27 {allocation.offset = 0 : i32} : tensor<128x64xf32, #blocked> -> tensor<128x64xf32, #blocked1> loc(#loc29)
    tt.store %47, %55, %54 : tensor<128x64x!tt.ptr<f32>, #blocked1> loc(#loc29)
    tt.return loc(#loc30)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/ubuntu/triton/matmul.py":17:26)
#loc3 = loc("/home/ubuntu/triton/matmul.py":18:26)
#loc4 = loc("/home/ubuntu/triton/matmul.py":20:21)
#loc5 = loc("/home/ubuntu/triton/matmul.py":20:49)
#loc6 = loc("/home/ubuntu/triton/matmul.py":20:36)
#loc7 = loc("/home/ubuntu/triton/matmul.py":21:21)
#loc8 = loc("/home/ubuntu/triton/matmul.py":21:49)
#loc9 = loc("/home/ubuntu/triton/matmul.py":21:36)
#loc10 = loc("/home/ubuntu/triton/matmul.py":24:28)
#loc11 = loc("/home/ubuntu/triton/matmul.py":24:39)
#loc12 = loc("/home/ubuntu/triton/matmul.py":24:21)
#loc13 = loc("/home/ubuntu/triton/matmul.py":25:28)
#loc14 = loc("/home/ubuntu/triton/matmul.py":25:21)
#loc16 = loc("/home/ubuntu/triton/matmul.py":32:29)
#loc17 = loc("/home/ubuntu/triton/matmul.py":32:20)
#loc18 = loc("/home/ubuntu/triton/matmul.py":33:33)
#loc19 = loc("/home/ubuntu/triton/matmul.py":33:29)
#loc20 = loc("/home/ubuntu/triton/matmul.py":33:20)
#loc21 = loc("/home/ubuntu/triton/matmul.py":34:27)
#loc22 = loc("/home/ubuntu/triton/matmul.py":34:23)
#loc23 = loc("/home/ubuntu/triton/matmul.py":37:39)
#loc24 = loc("/home/ubuntu/triton/matmul.py":37:21)
#loc25 = loc("/home/ubuntu/triton/matmul.py":37:51)
#loc26 = loc("/home/ubuntu/triton/matmul.py":40:33)
#loc27 = loc("/home/ubuntu/triton/matmul.py":40:58)
#loc28 = loc("/home/ubuntu/triton/matmul.py":40:39)
#loc29 = loc("/home/ubuntu/triton/matmul.py":41:21)
#loc30 = loc("/home/ubuntu/triton/matmul.py":41:4)
