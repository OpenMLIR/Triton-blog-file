// Next run Pass --canonicalize
// IR Dump After Canonicalizer ('tt.func' operation: @matrix_multiplication_kernel)
// Current Run Pass --canonicalize

#loc = loc("/home/ubuntu/triton/matmul.py":6:0)
module {
  tt.func public @matrix_multiplication_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0)) attributes {noinline = false} {
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %1, %c128_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<128xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<128xi32> loc(#loc6)
    %6 = arith.muli %0, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %10 = tt.expand_dims %5 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc10)
    %11 = tt.splat %arg6 : i32 -> tensor<128x1xi32> loc(#loc11)
    %12 = arith.muli %10, %11 : tensor<128x1xi32> loc(#loc11)
    %13 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>> loc(#loc12)
    %14 = tt.addptr %13, %12 : tensor<128x1x!tt.ptr<f32>>, tensor<128x1xi32> loc(#loc12)
    %15 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc13)
    %16 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc14)
    %17 = tt.addptr %16, %15 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc14)
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc45)
    %18 = scf.for %arg9 = %c0_i32 to %arg4 step %c1_i32 iter_args(%arg10 = %cst) -> (tensor<128x64xf32>)  : i32 {
      %45 = tt.splat %arg9 : i32 -> tensor<128x1xi32> loc(#loc18)
      %46 = tt.addptr %14, %45 : tensor<128x1x!tt.ptr<f32>>, tensor<128x1xi32> loc(#loc18)
      %47 = tt.load %46 : tensor<128x1x!tt.ptr<f32>> loc(#loc19)
      %48 = arith.muli %arg9, %arg7 : i32 loc(#loc20)
      %49 = tt.splat %48 : i32 -> tensor<1x64xi32> loc(#loc21)
      %50 = tt.addptr %17, %49 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc21)
      %51 = tt.load %50 : tensor<1x64x!tt.ptr<f32>> loc(#loc22)
      %52 = tt.broadcast %47 : tensor<128x1xf32> -> tensor<128x64xf32> loc(#loc23)
      %53 = tt.broadcast %51 : tensor<1x64xf32> -> tensor<128x64xf32> loc(#loc23)
      %54 = arith.mulf %52, %53 : tensor<128x64xf32> loc(#loc23)
      %55 = arith.addf %arg10, %54 : tensor<128x64xf32> loc(#loc24)
      scf.yield %55 : tensor<128x64xf32> loc(#loc25)
    } loc(#loc17)
    %19 = tt.expand_dims %5 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc26)
    %20 = tt.splat %arg8 : i32 -> tensor<128x1xi32> loc(#loc27)
    %21 = arith.muli %19, %20 : tensor<128x1xi32> loc(#loc27)
    %22 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>> loc(#loc28)
    %23 = tt.addptr %22, %21 : tensor<128x1x!tt.ptr<f32>>, tensor<128x1xi32> loc(#loc28)
    %24 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc29)
    %25 = tt.broadcast %23 : tensor<128x1x!tt.ptr<f32>> -> tensor<128x64x!tt.ptr<f32>> loc(#loc30)
    %26 = tt.broadcast %24 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc30)
    %27 = tt.addptr %25, %26 : tensor<128x64x!tt.ptr<f32>>, tensor<128x64xi32> loc(#loc30)
    %28 = arith.muli %1, %c128_i32 : i32 loc(#loc31)
    %29 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc32)
    %30 = tt.splat %28 : i32 -> tensor<128xi32> loc(#loc33)
    %31 = arith.addi %30, %29 : tensor<128xi32> loc(#loc33)
    %32 = arith.muli %0, %c64_i32 : i32 loc(#loc34)
    %33 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc35)
    %34 = tt.splat %32 : i32 -> tensor<64xi32> loc(#loc36)
    %35 = arith.addi %34, %33 : tensor<64xi32> loc(#loc36)
    %36 = tt.expand_dims %31 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc37)
    %37 = tt.splat %arg3 : i32 -> tensor<128x1xi32> loc(#loc38)
    %38 = arith.cmpi slt, %36, %37 : tensor<128x1xi32> loc(#loc38)
    %39 = tt.expand_dims %35 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc39)
    %40 = tt.splat %arg5 : i32 -> tensor<1x64xi32> loc(#loc40)
    %41 = arith.cmpi slt, %39, %40 : tensor<1x64xi32> loc(#loc40)
    %42 = tt.broadcast %38 : tensor<128x1xi1> -> tensor<128x64xi1> loc(#loc41)
    %43 = tt.broadcast %41 : tensor<1x64xi1> -> tensor<128x64xi1> loc(#loc41)
    %44 = arith.andi %42, %43 : tensor<128x64xi1> loc(#loc41)
    tt.store %27, %18, %44 : tensor<128x64x!tt.ptr<f32>> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<128x64xf32> attributes {noinline = false} loc(#loc44)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/triton/matmul.py":17:26)
#loc3 = loc("/home/ubuntu/triton/matmul.py":18:26)
#loc4 = loc("/home/ubuntu/triton/matmul.py":20:21)
#loc5 = loc("/home/ubuntu/triton/matmul.py":20:49)
#loc6 = loc("/home/ubuntu/triton/matmul.py":20:36)
#loc7 = loc("/home/ubuntu/triton/matmul.py":21:21)
#loc8 = loc("/home/ubuntu/triton/matmul.py":21:49)
#loc9 = loc("/home/ubuntu/triton/matmul.py":21:36)
#loc10 = loc("/home/ubuntu/triton/matmul.py":24:28)
#loc11 = loc("/home/ubuntu/triton/matmul.py":24:39)
#loc12 = loc("/home/ubuntu/triton/matmul.py":24:21)
#loc13 = loc("/home/ubuntu/triton/matmul.py":25:28)
#loc14 = loc("/home/ubuntu/triton/matmul.py":25:21)
#loc15 = loc("/home/ubuntu/triton/python/triton/language/standard.py":126:31)
#loc16 = loc("/home/ubuntu/triton/matmul.py":27:27)
#loc17 = loc("/home/ubuntu/triton/matmul.py":30:19)
#loc18 = loc("/home/ubuntu/triton/matmul.py":32:29)
#loc19 = loc("/home/ubuntu/triton/matmul.py":32:20)
#loc20 = loc("/home/ubuntu/triton/matmul.py":33:33)
#loc21 = loc("/home/ubuntu/triton/matmul.py":33:29)
#loc22 = loc("/home/ubuntu/triton/matmul.py":33:20)
#loc23 = loc("/home/ubuntu/triton/matmul.py":34:27)
#loc24 = loc("/home/ubuntu/triton/matmul.py":34:23)
#loc25 = loc("/home/ubuntu/triton/matmul.py":34:8)
#loc26 = loc("/home/ubuntu/triton/matmul.py":37:28)
#loc27 = loc("/home/ubuntu/triton/matmul.py":37:39)
#loc28 = loc("/home/ubuntu/triton/matmul.py":37:21)
#loc29 = loc("/home/ubuntu/triton/matmul.py":37:58)
#loc30 = loc("/home/ubuntu/triton/matmul.py":37:51)
#loc31 = loc("/home/ubuntu/triton/matmul.py":38:22)
#loc32 = loc("/home/ubuntu/triton/matmul.py":38:50)
#loc33 = loc("/home/ubuntu/triton/matmul.py":38:37)
#loc34 = loc("/home/ubuntu/triton/matmul.py":39:22)
#loc35 = loc("/home/ubuntu/triton/matmul.py":39:50)
#loc36 = loc("/home/ubuntu/triton/matmul.py":39:37)
#loc37 = loc("/home/ubuntu/triton/matmul.py":40:22)
#loc38 = loc("/home/ubuntu/triton/matmul.py":40:33)
#loc39 = loc("/home/ubuntu/triton/matmul.py":40:47)
#loc40 = loc("/home/ubuntu/triton/matmul.py":40:58)
#loc41 = loc("/home/ubuntu/triton/matmul.py":40:39)
#loc42 = loc("/home/ubuntu/triton/matmul.py":41:21)
#loc43 = loc("/home/ubuntu/triton/matmul.py":41:4)
#loc44 = loc("/home/ubuntu/triton/python/triton/language/standard.py":117:0)
#loc45 = loc(callsite(#loc15 at #loc16))
