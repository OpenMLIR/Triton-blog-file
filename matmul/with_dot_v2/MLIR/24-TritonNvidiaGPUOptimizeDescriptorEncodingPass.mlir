// Next run Pass --triton-loop-aware-cse
// IR Dump After TritonNvidiaGPUOptimizeDescriptorEncodingPass ('builtin.module' operation)
// Current Run Pass --triton-nvidia-optimize-descriptor-encoding

#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 64], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#loc = loc("/home/ubuntu/triton/matmul.py":6:0)
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 32}>
#shared1 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 32}>
#smem = #ttg.shared_memory
#tmem = #ttng.tensor_memory_encoding<blockM = 128, blockN = 64, unpacked = true>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:100", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matrix_multiplication_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0)) attributes {noinline = false} {
    %true = arith.constant true loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %1, %c128_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %6 = arith.muli %0, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %10 = tt.expand_dims %5 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc10)
    %11 = tt.splat %arg6 : i32 -> tensor<128x1xi32, #blocked> loc(#loc11)
    %12 = arith.muli %10, %11 : tensor<128x1xi32, #blocked> loc(#loc11)
    %13 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %14 = tt.addptr %13, %12 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc12)
    %15 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %16 = tt.expand_dims %15 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc13)
    %17 = tt.broadcast %14 : tensor<128x1x!tt.ptr<f32>, #blocked> -> tensor<128x64x!tt.ptr<f32>, #blocked> loc(#loc14)
    %18 = tt.broadcast %16 : tensor<1x64xi32, #blocked> -> tensor<128x64xi32, #blocked> loc(#loc14)
    %19 = tt.addptr %17, %18 : tensor<128x64x!tt.ptr<f32>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc14)
    %20 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %21 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %22 = tt.expand_dims %20 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc15)
    %23 = tt.expand_dims %21 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc16)
    %25 = arith.muli %22, %24 : tensor<64x1xi32, #blocked> loc(#loc16)
    %26 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %27 = tt.addptr %26, %25 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc17)
    %28 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc18)
    %29 = tt.broadcast %27 : tensor<64x1x!tt.ptr<f32>, #blocked> -> tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc19)
    %30 = tt.broadcast %28 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc19)
    %31 = tt.addptr %29, %30 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc19)
    %32 = arith.addi %arg4, %c63_i32 : i32 loc(#loc43)
    %33 = arith.divsi %32, %c64_i32 : i32 loc(#loc44)
    %34 = scf.for %arg9 = %c0_i32 to %33 step %c1_i32 iter_args(%arg10 = %cst_1) -> (tensor<128x64xf32, #blocked1>)  : i32 {
      %50 = arith.muli %arg9, %c64_i32 : i32 loc(#loc24)
      %51 = arith.subi %arg4, %50 : i32 loc(#loc25)
      %52 = tt.splat %51 : i32 -> tensor<1x64xi32, #blocked> loc(#loc26)
      %53 = arith.cmpi slt, %16, %52 : tensor<1x64xi32, #blocked> loc(#loc26)
      %54 = tt.splat %50 : i32 -> tensor<128x64xi32, #blocked> loc(#loc27)
      %55 = tt.addptr %19, %54 : tensor<128x64x!tt.ptr<f32>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc27)
      %56 = tt.broadcast %53 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc28)
      %57 = tt.load %55, %56, %cst_0 : tensor<128x64x!tt.ptr<f32>, #blocked> loc(#loc28)
      %58 = ttg.local_alloc %57 : (tensor<128x64xf32, #blocked>) -> !ttg.memdesc<128x64xf32, #shared, #smem> loc(#loc28)
      %59 = tt.splat %51 : i32 -> tensor<64x1xi32, #blocked> loc(#loc29)
      %60 = arith.cmpi slt, %23, %59 : tensor<64x1xi32, #blocked> loc(#loc29)
      %61 = arith.muli %50, %arg7 : i32 loc(#loc30)
      %62 = tt.splat %61 : i32 -> tensor<64x64xi32, #blocked> loc(#loc31)
      %63 = tt.addptr %31, %62 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc31)
      %64 = tt.broadcast %60 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc32)
      %65 = tt.load %63, %64, %cst : tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc32)
      %66 = ttg.local_alloc %65 : (tensor<64x64xf32, #blocked>) -> !ttg.memdesc<64x64xf32, #shared1, #smem> loc(#loc32)
      %result, %token = ttng.tmem_alloc %arg10 : (tensor<128x64xf32, #blocked1>) -> (!ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable>, !ttg.async.token) loc(#loc33)
      %67 = ttng.tc_gen5_mma %58, %66, %result[%token], %true, %true : !ttg.memdesc<128x64xf32, #shared, #smem>, !ttg.memdesc<64x64xf32, #shared1, #smem>, !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable> loc(#loc33)
      %result_2, %token_3 = ttng.tmem_load %result[%67] : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable> -> tensor<128x64xf32, #blocked1> loc(#loc33)
      scf.yield %result_2 : tensor<128x64xf32, #blocked1> loc(#loc34)
    } loc(#loc23)
    %35 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #blocked> loc(#loc35)
    %36 = arith.muli %10, %35 : tensor<128x1xi32, #blocked> loc(#loc35)
    %37 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc36)
    %38 = tt.addptr %37, %36 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc36)
    %39 = tt.broadcast %38 : tensor<128x1x!tt.ptr<f32>, #blocked> -> tensor<128x64x!tt.ptr<f32>, #blocked> loc(#loc37)
    %40 = tt.broadcast %28 : tensor<1x64xi32, #blocked> -> tensor<128x64xi32, #blocked> loc(#loc37)
    %41 = tt.addptr %39, %40 : tensor<128x64x!tt.ptr<f32>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc37)
    %42 = tt.splat %arg3 : i32 -> tensor<128x1xi32, #blocked> loc(#loc38)
    %43 = arith.cmpi slt, %10, %42 : tensor<128x1xi32, #blocked> loc(#loc38)
    %44 = tt.splat %arg5 : i32 -> tensor<1x64xi32, #blocked> loc(#loc39)
    %45 = arith.cmpi slt, %28, %44 : tensor<1x64xi32, #blocked> loc(#loc39)
    %46 = tt.broadcast %43 : tensor<128x1xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc40)
    %47 = tt.broadcast %45 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc40)
    %48 = arith.andi %46, %47 : tensor<128x64xi1, #blocked> loc(#loc40)
    %49 = ttg.convert_layout %34 : tensor<128x64xf32, #blocked1> -> tensor<128x64xf32, #blocked> loc(#loc41)
    tt.store %41, %49, %48 : tensor<128x64x!tt.ptr<f32>, #blocked> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/triton/matmul.py":18:26)
#loc3 = loc("/home/ubuntu/triton/matmul.py":19:26)
#loc4 = loc("/home/ubuntu/triton/matmul.py":21:21)
#loc5 = loc("/home/ubuntu/triton/matmul.py":21:49)
#loc6 = loc("/home/ubuntu/triton/matmul.py":21:36)
#loc7 = loc("/home/ubuntu/triton/matmul.py":22:21)
#loc8 = loc("/home/ubuntu/triton/matmul.py":22:49)
#loc9 = loc("/home/ubuntu/triton/matmul.py":22:36)
#loc10 = loc("/home/ubuntu/triton/matmul.py":26:28)
#loc11 = loc("/home/ubuntu/triton/matmul.py":26:39)
#loc12 = loc("/home/ubuntu/triton/matmul.py":26:21)
#loc13 = loc("/home/ubuntu/triton/matmul.py":26:58)
#loc14 = loc("/home/ubuntu/triton/matmul.py":26:51)
#loc15 = loc("/home/ubuntu/triton/matmul.py":27:28)
#loc16 = loc("/home/ubuntu/triton/matmul.py":27:39)
#loc17 = loc("/home/ubuntu/triton/matmul.py":27:21)
#loc18 = loc("/home/ubuntu/triton/matmul.py":27:58)
#loc19 = loc("/home/ubuntu/triton/matmul.py":27:51)
#loc20 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:22)
#loc21 = loc("/home/ubuntu/triton/matmul.py":32:33)
#loc22 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:28)
#loc23 = loc("/home/ubuntu/triton/matmul.py":32:22)
#loc24 = loc("/home/ubuntu/triton/matmul.py":33:23)
#loc25 = loc("/home/ubuntu/triton/matmul.py":34:22)
#loc26 = loc("/home/ubuntu/triton/matmul.py":36:74)
#loc27 = loc("/home/ubuntu/triton/matmul.py":36:29)
#loc28 = loc("/home/ubuntu/triton/matmul.py":36:20)
#loc29 = loc("/home/ubuntu/triton/matmul.py":37:74)
#loc30 = loc("/home/ubuntu/triton/matmul.py":37:40)
#loc31 = loc("/home/ubuntu/triton/matmul.py":37:29)
#loc32 = loc("/home/ubuntu/triton/matmul.py":37:20)
#loc33 = loc("/home/ubuntu/triton/matmul.py":39:32)
#loc34 = loc("/home/ubuntu/triton/matmul.py":39:8)
#loc35 = loc("/home/ubuntu/triton/matmul.py":42:39)
#loc36 = loc("/home/ubuntu/triton/matmul.py":42:21)
#loc37 = loc("/home/ubuntu/triton/matmul.py":42:51)
#loc38 = loc("/home/ubuntu/triton/matmul.py":43:32)
#loc39 = loc("/home/ubuntu/triton/matmul.py":43:56)
#loc40 = loc("/home/ubuntu/triton/matmul.py":43:38)
#loc41 = loc("/home/ubuntu/triton/matmul.py":44:21)
#loc42 = loc("/home/ubuntu/triton/matmul.py":44:4)
#loc43 = loc(callsite(#loc20 at #loc21))
#loc44 = loc(callsite(#loc22 at #loc21))
