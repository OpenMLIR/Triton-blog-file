// Next run Pass --tritongpu-combine-tensor-select-and-if
// IR Dump After TritonGPUPipeline ('builtin.module' operation)
// Current Run Pass --tritongpu-pipeline

#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 64], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#loc = loc("/home/ubuntu/triton/matmul.py":6:0)
#shared = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared1 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 32}>
#shared2 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 32}>
#smem = #ttg.shared_memory
#tmem = #ttng.tensor_memory_encoding<blockM = 128, blockN = 64, unpacked = true>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:100", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matrix_multiplication_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/ubuntu/triton/matmul.py":6:0)) attributes {noinline = false} {
    %cst = arith.constant dense<128> : tensor<128x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<128x64xi32, #blocked> loc(#loc1)
    %0 = ub.poison : !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc1)
    %1 = ub.poison : !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc1)
    %2 = ub.poison : !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc1)
    %3 = ub.poison : !ttg.async.token loc(#loc1)
    %4 = ub.poison : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #blocked1> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #blocked> loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %false = arith.constant false loc(#loc1)
    %5 = tt.get_program_id x : i32 loc(#loc2)
    %6 = tt.get_program_id y : i32 loc(#loc3)
    %7 = arith.muli %6, %c128_i32 : i32 loc(#loc4)
    %8 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %9 = tt.splat %7 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %10 = arith.addi %9, %8 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %11 = arith.muli %5, %c64_i32 : i32 loc(#loc7)
    %12 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.splat %11 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %14 = arith.addi %13, %12 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %15 = tt.expand_dims %10 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc10)
    %16 = tt.splat %arg6 : i32 -> tensor<128x1xi32, #blocked> loc(#loc11)
    %17 = arith.muli %15, %16 : tensor<128x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %19 = tt.addptr %18, %17 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc12)
    %20 = tt.expand_dims %12 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc13)
    %21 = tt.broadcast %19 : tensor<128x1x!tt.ptr<f32>, #blocked> -> tensor<128x64x!tt.ptr<f32>, #blocked> loc(#loc14)
    %22 = tt.broadcast %20 : tensor<1x64xi32, #blocked> -> tensor<128x64xi32, #blocked> loc(#loc14)
    %23 = tt.addptr %21, %22 : tensor<128x64x!tt.ptr<f32>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc14)
    %24 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %25 = tt.expand_dims %24 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc15)
    %26 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc16)
    %27 = arith.muli %25, %26 : tensor<64x1xi32, #blocked> loc(#loc16)
    %28 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %29 = tt.addptr %28, %27 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc17)
    %30 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc18)
    %31 = tt.broadcast %29 : tensor<64x1x!tt.ptr<f32>, #blocked> -> tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc19)
    %32 = tt.broadcast %30 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc19)
    %33 = tt.addptr %31, %32 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc19)
    %34 = arith.addi %arg4, %c63_i32 : i32 loc(#loc42)
    %35 = arith.divsi %34, %c64_i32 : i32 loc(#loc43)
    %result, %token = ttng.tmem_alloc : () -> (!ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable>, !ttg.async.token) loc(#loc23)
    %36 = ttng.tmem_store %cst_1, %result[%token], %true : tensor<128x64xf32, #blocked1> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable> loc(#loc23)
    %37 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared, #smem, mutable> loc(#loc24)
    %38 = ttg.memdesc_subview %37[%c0_i32] : !ttg.memdesc<2xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc24)
    ttng.init_barrier %38, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc24)
    %39 = ttg.memdesc_subview %37[%c1_i32] : !ttg.memdesc<2xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc24)
    ttng.init_barrier %39, 1 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc24)
    %40 = ttg.local_alloc : () -> !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> loc(#loc25)
    %41 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xf32, #shared1, #smem, mutable> loc(#loc26)
    %42 = arith.cmpi sgt, %35, %c0_i32 : i32 loc(#loc24)
    %43 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked> loc(#loc27)
    %44 = arith.cmpi slt, %20, %43 : tensor<1x64xi32, #blocked> loc(#loc27)
    %45 = tt.broadcast %44 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc25)
    %46 = ttg.memdesc_subview %40[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc25)
    %47 = tt.splat %42 : i1 -> tensor<128x64xi1, #blocked> loc(#loc24)
    %48 = arith.andi %47, %45 : tensor<128x64xi1, #blocked> loc(#loc24)
    %49 = ttg.async_copy_global_to_local %23, %46 mask %48 other %cst_2 : tensor<128x64x!tt.ptr<f32>, #blocked> -> <128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc25)
    %50 = ttg.async_commit_group %49 loc(#loc25)
    %51 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc28)
    %52 = arith.cmpi slt, %25, %51 : tensor<64x1xi32, #blocked> loc(#loc28)
    %53 = tt.broadcast %52 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc26)
    %54 = ttg.memdesc_subview %41[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc26)
    %55 = tt.splat %42 : i1 -> tensor<64x64xi1, #blocked> loc(#loc24)
    %56 = arith.andi %55, %53 : tensor<64x64xi1, #blocked> loc(#loc24)
    %57 = ttg.async_copy_global_to_local %33, %54 mask %56 other %cst_3 : tensor<64x64x!tt.ptr<f32>, #blocked> -> <64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc26)
    %58 = ttg.async_commit_group %57 loc(#loc26)
    %59 = arith.cmpi sgt, %35, %c1_i32 : i32 loc(#loc24)
    %60 = arith.subi %arg4, %c64_i32 : i32 loc(#loc29)
    %61 = tt.splat %60 : i32 -> tensor<1x64xi32, #blocked> loc(#loc27)
    %62 = arith.cmpi slt, %20, %61 : tensor<1x64xi32, #blocked> loc(#loc27)
    %63 = tt.addptr %23, %cst_0 : tensor<128x64x!tt.ptr<f32>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc30)
    %64 = tt.broadcast %62 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc25)
    %65 = ttg.memdesc_subview %40[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc25)
    %66 = tt.splat %59 : i1 -> tensor<128x64xi1, #blocked> loc(#loc24)
    %67 = arith.andi %66, %64 : tensor<128x64xi1, #blocked> loc(#loc24)
    %68 = ttg.async_copy_global_to_local %63, %65 mask %67 other %cst_2 : tensor<128x64x!tt.ptr<f32>, #blocked> -> <128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc25)
    %69 = ttg.async_commit_group %68 loc(#loc25)
    %70 = tt.splat %60 : i32 -> tensor<64x1xi32, #blocked> loc(#loc28)
    %71 = arith.cmpi slt, %25, %70 : tensor<64x1xi32, #blocked> loc(#loc28)
    %72 = arith.muli %arg7, %c64_i32 : i32 loc(#loc31)
    %73 = tt.splat %72 : i32 -> tensor<64x64xi32, #blocked> loc(#loc32)
    %74 = tt.addptr %33, %73 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc32)
    %75 = tt.broadcast %71 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc26)
    %76 = ttg.memdesc_subview %41[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc26)
    %77 = tt.splat %59 : i1 -> tensor<64x64xi1, #blocked> loc(#loc24)
    %78 = arith.andi %77, %75 : tensor<64x64xi1, #blocked> loc(#loc24)
    %79 = ttg.async_copy_global_to_local %74, %76 mask %78 other %cst_3 : tensor<64x64x!tt.ptr<f32>, #blocked> -> <64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc26)
    %80 = ttg.async_commit_group %79 loc(#loc26)
    %81 = arith.cmpi sgt, %35, %c2_i32 : i32 loc(#loc24)
    %82 = ttg.async_wait %50, %58 {num = 2 : i32} loc(#loc25)
    %83 = ttg.memdesc_subview %40[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc25)
    %84 = ttg.memdesc_subview %41[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc26)
    %85 = ttg.memdesc_subview %37[%c0_i32] : !ttg.memdesc<2xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc24)
    %86 = ttng.tc_gen5_mma %83, %84, %result[%36], %false, %42, %85[%true] : !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64>, !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable>, !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc23)
    %87 = arith.select %42, %86, %36 : !ttg.async.token loc(#loc24)
    %88 = arith.subi %arg4, %c128_i32 : i32 loc(#loc29)
    %89 = tt.splat %88 : i32 -> tensor<1x64xi32, #blocked> loc(#loc27)
    %90 = arith.cmpi slt, %20, %89 : tensor<1x64xi32, #blocked> loc(#loc27)
    %91 = tt.addptr %23, %cst : tensor<128x64x!tt.ptr<f32>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc30)
    %92 = tt.broadcast %90 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc25)
    %93 = ttg.memdesc_subview %40[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc25)
    %94 = tt.splat %81 : i1 -> tensor<128x64xi1, #blocked> loc(#loc24)
    %95 = arith.andi %94, %92 : tensor<128x64xi1, #blocked> loc(#loc24)
    %96 = ttg.async_copy_global_to_local %91, %93 mask %95 other %cst_2 : tensor<128x64x!tt.ptr<f32>, #blocked> -> <128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc25)
    %97 = ttg.async_commit_group %96 loc(#loc25)
    %98 = tt.splat %88 : i32 -> tensor<64x1xi32, #blocked> loc(#loc28)
    %99 = arith.cmpi slt, %25, %98 : tensor<64x1xi32, #blocked> loc(#loc28)
    %100 = arith.muli %arg7, %c128_i32 : i32 loc(#loc31)
    %101 = tt.splat %100 : i32 -> tensor<64x64xi32, #blocked> loc(#loc32)
    %102 = tt.addptr %33, %101 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc32)
    %103 = tt.broadcast %99 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc26)
    %104 = ttg.memdesc_subview %41[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc26)
    %105 = tt.splat %81 : i1 -> tensor<64x64xi1, #blocked> loc(#loc24)
    %106 = arith.andi %105, %103 : tensor<64x64xi1, #blocked> loc(#loc24)
    %107 = ttg.async_copy_global_to_local %102, %104 mask %106 other %cst_3 : tensor<64x64x!tt.ptr<f32>, #blocked> -> <64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc26)
    %108 = ttg.async_commit_group %107 loc(#loc26)
    %109 = arith.subi %35, %c1_i32 : i32 loc(#loc24)
    %110:16 = scf.for %arg9 = %c0_i32 to %109 step %c1_i32 iter_args(%arg10 = %false, %arg11 = %87, %arg12 = %c0_i32, %arg13 = %c1_i32, %arg14 = %c2_i32, %arg15 = %c0_i32, %arg16 = %c3_i32, %arg17 = %c3_i32, %arg18 = %69, %arg19 = %97, %arg20 = %80, %arg21 = %108, %arg22 = %85, %arg23 = %c0_i32, %arg24 = %83, %arg25 = %84) -> (i1, !ttg.async.token, i32, i32, i32, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.memdesc<1xi64, #shared, #smem, mutable, 2>, i32, !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64>)  : i32 {
      %131 = arith.subi %35, %c3_i32 : i32 loc(#loc24)
      %132 = arith.cmpi slt, %arg9, %131 : i32 loc(#loc24)
      %133 = arith.addi %arg15, %c1_i32 : i32 loc(#loc24)
      %134 = arith.cmpi sge, %133, %arg16 : i32 loc(#loc24)
      %135 = arith.select %134, %c0_i32, %133 : i32 loc(#loc24)
      %136 = ttg.async_wait %arg18, %arg20 {num = 2 : i32} loc(#loc25)
      %137 = ttg.memdesc_subview %40[%135, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc25)
      %138 = ttg.memdesc_subview %41[%135, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc26)
      %139 = ttg.memdesc_subview %37[%arg13] : !ttg.memdesc<2xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc24)
      %140 = ttng.tc_gen5_mma %137, %138, %result[%arg11], %true, %true, %139[%true] : !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64>, !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable>, !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc23)
      ttng.wait_barrier %arg22, %arg23 deps %arg24, %arg25 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 2>, !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc23)
      %141 = arith.xori %arg12, %c1_i32 : i32 loc(#loc23)
      %142 = arith.addi %arg13, %c1_i32 : i32 loc(#loc23)
      %143 = arith.cmpi sge, %142, %c2_i32 : i32 loc(#loc23)
      %144 = arith.select %143, %c0_i32, %142 : i32 loc(#loc23)
      %145 = arith.select %143, %141, %arg12 : i32 loc(#loc23)
      %146 = arith.addi %arg14, %c1_i32 : i32 loc(#loc24)
      %147 = arith.cmpi sge, %146, %c3_i32 : i32 loc(#loc24)
      %148 = arith.select %147, %c0_i32, %146 : i32 loc(#loc24)
      %149 = arith.addi %arg9, %c3_i32 : i32 loc(#loc24)
      %150 = arith.muli %149, %c64_i32 : i32 loc(#loc33)
      %151 = arith.subi %arg4, %150 : i32 loc(#loc29)
      %152 = tt.splat %151 : i32 -> tensor<1x64xi32, #blocked> loc(#loc27)
      %153 = arith.cmpi slt, %20, %152 : tensor<1x64xi32, #blocked> loc(#loc27)
      %154 = tt.splat %150 : i32 -> tensor<128x64xi32, #blocked> loc(#loc30)
      %155 = tt.addptr %23, %154 : tensor<128x64x!tt.ptr<f32>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc30)
      %156 = tt.broadcast %153 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc25)
      %157 = ttg.memdesc_subview %40[%148, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc25)
      %158 = tt.splat %132 : i1 -> tensor<128x64xi1, #blocked> loc(#loc24)
      %159 = arith.andi %158, %156 : tensor<128x64xi1, #blocked> loc(#loc24)
      %160 = ttg.async_copy_global_to_local %155, %157 mask %159 other %cst_2 : tensor<128x64x!tt.ptr<f32>, #blocked> -> <128x64xf32, #shared2, #smem, mutable, 3x128x64> loc(#loc25)
      %161 = ttg.async_commit_group %160 loc(#loc25)
      %162 = tt.splat %151 : i32 -> tensor<64x1xi32, #blocked> loc(#loc28)
      %163 = arith.cmpi slt, %25, %162 : tensor<64x1xi32, #blocked> loc(#loc28)
      %164 = arith.muli %150, %arg7 : i32 loc(#loc31)
      %165 = tt.splat %164 : i32 -> tensor<64x64xi32, #blocked> loc(#loc32)
      %166 = tt.addptr %33, %165 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc32)
      %167 = tt.broadcast %163 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc26)
      %168 = ttg.memdesc_subview %41[%148, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc26)
      %169 = tt.splat %132 : i1 -> tensor<64x64xi1, #blocked> loc(#loc24)
      %170 = arith.andi %169, %167 : tensor<64x64xi1, #blocked> loc(#loc24)
      %171 = ttg.async_copy_global_to_local %166, %168 mask %170 other %cst_3 : tensor<64x64x!tt.ptr<f32>, #blocked> -> <64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc26)
      %172 = ttg.async_commit_group %171 loc(#loc26)
      scf.yield %true, %140, %145, %144, %148, %135, %arg17, %c3_i32, %arg19, %161, %arg21, %172, %139, %arg12, %137, %138 : i1, !ttg.async.token, i32, i32, i32, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.memdesc<1xi64, #shared, #smem, mutable, 2>, i32, !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc24)
    } loc(#loc24)
    %111 = arith.cmpi sgt, %35, %c0_i32 : i32 loc(#loc24)
    %112:16 = scf.if %111 -> (i1, !ttg.async.token, i32, i32, i32, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.memdesc<1xi64, #shared, #smem, mutable, 2>, i32, !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64>) {
      ttng.wait_barrier %110#12, %110#13 deps %110#14, %110#15 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 2>, !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc23)
      scf.yield %true, %110#1, %4, %4, %4, %4, %110#7, %c3_i32, %110#9, %3, %110#11, %3, %0, %110#2, %2, %1 : i1, !ttg.async.token, i32, i32, i32, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.memdesc<1xi64, #shared, #smem, mutable, 2>, i32, !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc24)
    } else {
      scf.yield %110#0, %110#1, %110#2, %110#3, %110#4, %110#5, %110#6, %110#7, %110#8, %110#9, %110#10, %110#11, %110#12, %110#13, %110#14, %110#15 : i1, !ttg.async.token, i32, i32, i32, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.memdesc<1xi64, #shared, #smem, mutable, 2>, i32, !ttg.memdesc<128x64xf32, #shared2, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf32, #shared1, #smem, mutable, 3x64x64> loc(#loc24)
    } loc(#loc24)
    %113 = ttg.async_wait  {num = 0 : i32} loc(#loc24)
    ttg.local_dealloc %41 : !ttg.memdesc<3x64x64xf32, #shared1, #smem, mutable> loc(#loc24)
    ttg.local_dealloc %40 : !ttg.memdesc<3x128x64xf32, #shared2, #smem, mutable> loc(#loc24)
    %114 = ttg.memdesc_subview %37[%c0_i32] : !ttg.memdesc<2xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc24)
    ttng.inval_barrier %114 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc24)
    %115 = ttg.memdesc_subview %37[%c1_i32] : !ttg.memdesc<2xi64, #shared, #smem, mutable> -> !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc24)
    ttng.inval_barrier %115 : !ttg.memdesc<1xi64, #shared, #smem, mutable, 2> loc(#loc24)
    ttg.local_dealloc %37 : !ttg.memdesc<2xi64, #shared, #smem, mutable> loc(#loc24)
    %result_4, %token_5 = ttng.tmem_load %result[%112#1] : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable> -> tensor<128x64xf32, #blocked1> loc(#loc23)
    %116 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #blocked> loc(#loc34)
    %117 = arith.muli %15, %116 : tensor<128x1xi32, #blocked> loc(#loc34)
    %118 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc35)
    %119 = tt.addptr %118, %117 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc35)
    %120 = tt.broadcast %119 : tensor<128x1x!tt.ptr<f32>, #blocked> -> tensor<128x64x!tt.ptr<f32>, #blocked> loc(#loc36)
    %121 = tt.broadcast %30 : tensor<1x64xi32, #blocked> -> tensor<128x64xi32, #blocked> loc(#loc36)
    %122 = tt.addptr %120, %121 : tensor<128x64x!tt.ptr<f32>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc36)
    %123 = tt.splat %arg3 : i32 -> tensor<128x1xi32, #blocked> loc(#loc37)
    %124 = arith.cmpi slt, %15, %123 : tensor<128x1xi32, #blocked> loc(#loc37)
    %125 = tt.splat %arg5 : i32 -> tensor<1x64xi32, #blocked> loc(#loc38)
    %126 = arith.cmpi slt, %30, %125 : tensor<1x64xi32, #blocked> loc(#loc38)
    %127 = tt.broadcast %124 : tensor<128x1xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc39)
    %128 = tt.broadcast %126 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc39)
    %129 = arith.andi %127, %128 : tensor<128x64xi1, #blocked> loc(#loc39)
    %130 = ttg.convert_layout %result_4 : tensor<128x64xf32, #blocked1> -> tensor<128x64xf32, #blocked> loc(#loc40)
    tt.store %122, %130, %129 : tensor<128x64x!tt.ptr<f32>, #blocked> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/triton/matmul.py":18:26)
#loc3 = loc("/home/ubuntu/triton/matmul.py":19:26)
#loc4 = loc("/home/ubuntu/triton/matmul.py":21:21)
#loc5 = loc("/home/ubuntu/triton/matmul.py":21:49)
#loc6 = loc("/home/ubuntu/triton/matmul.py":21:36)
#loc7 = loc("/home/ubuntu/triton/matmul.py":22:21)
#loc8 = loc("/home/ubuntu/triton/matmul.py":22:49)
#loc9 = loc("/home/ubuntu/triton/matmul.py":22:36)
#loc10 = loc("/home/ubuntu/triton/matmul.py":26:28)
#loc11 = loc("/home/ubuntu/triton/matmul.py":26:39)
#loc12 = loc("/home/ubuntu/triton/matmul.py":26:21)
#loc13 = loc("/home/ubuntu/triton/matmul.py":26:58)
#loc14 = loc("/home/ubuntu/triton/matmul.py":26:51)
#loc15 = loc("/home/ubuntu/triton/matmul.py":27:28)
#loc16 = loc("/home/ubuntu/triton/matmul.py":27:39)
#loc17 = loc("/home/ubuntu/triton/matmul.py":27:21)
#loc18 = loc("/home/ubuntu/triton/matmul.py":27:58)
#loc19 = loc("/home/ubuntu/triton/matmul.py":27:51)
#loc20 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:22)
#loc21 = loc("/home/ubuntu/triton/matmul.py":32:33)
#loc22 = loc("/home/ubuntu/triton/python/triton/language/standard.py":40:28)
#loc23 = loc("/home/ubuntu/triton/matmul.py":39:32)
#loc24 = loc("/home/ubuntu/triton/matmul.py":32:22)
#loc25 = loc("/home/ubuntu/triton/matmul.py":36:20)
#loc26 = loc("/home/ubuntu/triton/matmul.py":37:20)
#loc27 = loc("/home/ubuntu/triton/matmul.py":36:74)
#loc28 = loc("/home/ubuntu/triton/matmul.py":37:74)
#loc29 = loc("/home/ubuntu/triton/matmul.py":34:22)
#loc30 = loc("/home/ubuntu/triton/matmul.py":36:29)
#loc31 = loc("/home/ubuntu/triton/matmul.py":37:40)
#loc32 = loc("/home/ubuntu/triton/matmul.py":37:29)
#loc33 = loc("/home/ubuntu/triton/matmul.py":33:23)
#loc34 = loc("/home/ubuntu/triton/matmul.py":42:39)
#loc35 = loc("/home/ubuntu/triton/matmul.py":42:21)
#loc36 = loc("/home/ubuntu/triton/matmul.py":42:51)
#loc37 = loc("/home/ubuntu/triton/matmul.py":43:32)
#loc38 = loc("/home/ubuntu/triton/matmul.py":43:56)
#loc39 = loc("/home/ubuntu/triton/matmul.py":43:38)
#loc40 = loc("/home/ubuntu/triton/matmul.py":44:21)
#loc41 = loc("/home/ubuntu/triton/matmul.py":44:4)
#loc42 = loc(callsite(#loc20 at #loc21))
#loc43 = loc(callsite(#loc22 at #loc21))
