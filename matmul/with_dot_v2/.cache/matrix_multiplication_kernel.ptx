//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_100a
.address_size 64

	// .globl	matrix_multiplication_kernel // -- Begin function matrix_multiplication_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @matrix_multiplication_kernel
.visible .entry matrix_multiplication_kernel(
	.param .u64 .ptr .global .align 1 matrix_multiplication_kernel_param_0,
	.param .u64 .ptr .global .align 1 matrix_multiplication_kernel_param_1,
	.param .u64 .ptr .global .align 1 matrix_multiplication_kernel_param_2,
	.param .u32 matrix_multiplication_kernel_param_3,
	.param .u32 matrix_multiplication_kernel_param_4,
	.param .u32 matrix_multiplication_kernel_param_5,
	.param .u32 matrix_multiplication_kernel_param_6,
	.param .u32 matrix_multiplication_kernel_param_7,
	.param .u32 matrix_multiplication_kernel_param_8,
	.param .u64 .ptr .global .align 1 matrix_multiplication_kernel_param_9
)
.reqntid 128
{
	.reg .pred 	%p<126>;
	.reg .b32 	%r<1135>;
	.reg .b64 	%rd<396>;
	.loc	1 6 0                           // matmul.py:6:0
$L__func_begin0:
	.loc	1 6 0                           // matmul.py:6:0

// %bb.0:
	ld.param.b32 	%r101, [matrix_multiplication_kernel_param_7];
	ld.param.b32 	%r99, [matrix_multiplication_kernel_param_4];
	ld.param.b64 	%rd127, [matrix_multiplication_kernel_param_0];
$L__tmp0:
	.loc	1 6 0                           // matmul.py:6
	mov.u32 	%r1, %tid.x;
	ld.param.b64 	%rd128, [matrix_multiplication_kernel_param_1];
	setp.lt.u32 	%p1, %r1, 32;
	mov.b32 	%r103, global_smem;
	// begin inline asm
	@%p1 tcgen05.alloc.cta_group::1.sync.aligned.shared::cta.b32 [%r103], 64;
	// end inline asm
	bar.sync 	0;
	ld.shared.b32 	%r1077, [global_smem];
	bar.sync 	0;
	ld.param.b32 	%r363, [matrix_multiplication_kernel_param_6];
	// begin inline asm
	@%p1 tcgen05.relinquish_alloc_permit.cta_group::1.sync.aligned;
	// end inline asm
	.loc	1 18 26                         // matmul.py:18:26
	mov.u32 	%r364, %ctaid.x;
	.loc	1 19 26                         // matmul.py:19:26
	mov.u32 	%r365, %ctaid.y;
	.loc	1 21 21                         // matmul.py:21:21
	shl.b32 	%r366, %r365, 7;
	.loc	1 21 49                         // matmul.py:21:49
	and.b32 	%r3, %r1, 127;
	bfe.u32 	%r5, %r1, 4, 3;
	or.b32 	%r6, %r5, 8;
	or.b32 	%r7, %r5, 16;
	or.b32 	%r8, %r5, 24;
	or.b32 	%r9, %r5, 32;
	or.b32 	%r10, %r5, 40;
	or.b32 	%r11, %r5, 48;
	or.b32 	%r12, %r5, 56;
	.loc	1 21 36                         // matmul.py:21:36
	or.b32 	%r13, %r5, %r366;
	or.b32 	%r14, %r6, %r366;
	or.b32 	%r15, %r7, %r366;
	or.b32 	%r16, %r8, %r366;
	or.b32 	%r17, %r9, %r366;
	or.b32 	%r18, %r10, %r366;
	or.b32 	%r19, %r11, %r366;
	or.b32 	%r20, %r12, %r366;
	.loc	1 22 21                         // matmul.py:22:21
	shl.b32 	%r367, %r364, 6;
	.loc	1 22 49                         // matmul.py:22:49
	shl.b32 	%r368, %r1, 2;
	and.b32 	%r29, %r368, 60;
	.loc	1 22 36                         // matmul.py:22:36
	or.b32 	%r369, %r29, %r367;
	.loc	1 26 39                         // matmul.py:26:39
	mul.lo.s32 	%r370, %r363, %r13;
	mul.lo.s32 	%r371, %r363, %r14;
	mul.lo.s32 	%r372, %r363, %r15;
	mul.lo.s32 	%r373, %r363, %r16;
	mul.lo.s32 	%r374, %r363, %r17;
	mul.lo.s32 	%r375, %r363, %r18;
	mul.lo.s32 	%r376, %r363, %r19;
	mul.lo.s32 	%r377, %r363, %r20;
	shl.b32 	%r378, %r363, 6;
	add.s32 	%r379, %r370, %r378;
	shl.b32 	%r380, %r363, 3;
	add.s32 	%r381, %r379, %r380;
	add.s32 	%r382, %r381, %r380;
	add.s32 	%r383, %r382, %r380;
	add.s32 	%r384, %r383, %r380;
	add.s32 	%r385, %r384, %r380;
	add.s32 	%r386, %r385, %r380;
	add.s32 	%r387, %r386, %r380;
	.loc	1 26 21                         // matmul.py:26:21
	mul.wide.s32 	%rd129, %r370, 4;
	add.s64 	%rd130, %rd127, %rd129;
	mul.wide.s32 	%rd131, %r371, 4;
	add.s64 	%rd132, %rd127, %rd131;
	mul.wide.s32 	%rd133, %r372, 4;
	add.s64 	%rd134, %rd127, %rd133;
	mul.wide.s32 	%rd135, %r373, 4;
	add.s64 	%rd136, %rd127, %rd135;
	mul.wide.s32 	%rd137, %r374, 4;
	add.s64 	%rd138, %rd127, %rd137;
	mul.wide.s32 	%rd139, %r375, 4;
	add.s64 	%rd140, %rd127, %rd139;
	mul.wide.s32 	%rd141, %r376, 4;
	add.s64 	%rd142, %rd127, %rd141;
	mul.wide.s32 	%rd143, %r377, 4;
	add.s64 	%rd144, %rd127, %rd143;
	mul.wide.s32 	%rd145, %r379, 4;
	add.s64 	%rd146, %rd127, %rd145;
	mul.wide.s32 	%rd147, %r381, 4;
	add.s64 	%rd148, %rd127, %rd147;
	mul.wide.s32 	%rd149, %r382, 4;
	add.s64 	%rd150, %rd127, %rd149;
	mul.wide.s32 	%rd151, %r383, 4;
	add.s64 	%rd152, %rd127, %rd151;
	mul.wide.s32 	%rd153, %r384, 4;
	add.s64 	%rd154, %rd127, %rd153;
	mul.wide.s32 	%rd155, %r385, 4;
	add.s64 	%rd156, %rd127, %rd155;
	mul.wide.s32 	%rd157, %r386, 4;
	add.s64 	%rd158, %rd127, %rd157;
	mul.wide.s32 	%rd159, %r387, 4;
	add.s64 	%rd160, %rd127, %rd159;
	.loc	1 26 51                         // matmul.py:26:51
	mul.wide.u32 	%rd161, %r29, 4;
	add.s64 	%rd31, %rd130, %rd161;
	add.s64 	%rd32, %rd132, %rd161;
	add.s64 	%rd33, %rd134, %rd161;
	add.s64 	%rd34, %rd136, %rd161;
	add.s64 	%rd35, %rd138, %rd161;
	add.s64 	%rd36, %rd140, %rd161;
	add.s64 	%rd37, %rd142, %rd161;
	add.s64 	%rd38, %rd144, %rd161;
	add.s64 	%rd39, %rd146, %rd161;
	add.s64 	%rd40, %rd148, %rd161;
	add.s64 	%rd41, %rd150, %rd161;
	add.s64 	%rd42, %rd152, %rd161;
	add.s64 	%rd43, %rd154, %rd161;
	add.s64 	%rd44, %rd156, %rd161;
	add.s64 	%rd45, %rd158, %rd161;
	add.s64 	%rd46, %rd160, %rd161;
	.loc	1 27 39                         // matmul.py:27:39
	mul.lo.s32 	%r388, %r101, %r5;
	shl.b32 	%r389, %r101, 3;
	add.s32 	%r390, %r388, %r389;
	add.s32 	%r391, %r390, %r389;
	add.s32 	%r392, %r391, %r389;
	add.s32 	%r393, %r392, %r389;
	add.s32 	%r394, %r393, %r389;
	add.s32 	%r395, %r394, %r389;
	add.s32 	%r396, %r395, %r389;
	.loc	1 27 21                         // matmul.py:27:21
	mul.wide.s32 	%rd162, %r388, 4;
	add.s64 	%rd163, %rd128, %rd162;
	mul.wide.s32 	%rd164, %r390, 4;
	add.s64 	%rd165, %rd128, %rd164;
	mul.wide.s32 	%rd166, %r391, 4;
	add.s64 	%rd167, %rd128, %rd166;
	mul.wide.s32 	%rd168, %r392, 4;
	add.s64 	%rd169, %rd128, %rd168;
	mul.wide.s32 	%rd170, %r393, 4;
	add.s64 	%rd171, %rd128, %rd170;
	mul.wide.s32 	%rd172, %r394, 4;
	add.s64 	%rd173, %rd128, %rd172;
	mul.wide.s32 	%rd174, %r395, 4;
	add.s64 	%rd175, %rd128, %rd174;
	mul.wide.s32 	%rd176, %r396, 4;
	add.s64 	%rd177, %rd128, %rd176;
	.loc	1 27 51                         // matmul.py:27:51
	mul.wide.s32 	%rd178, %r369, 4;
	add.s64 	%rd47, %rd163, %rd178;
	add.s64 	%rd48, %rd47, 4;
	add.s64 	%rd49, %rd47, 8;
	add.s64 	%rd50, %rd47, 12;
	add.s64 	%rd51, %rd165, %rd178;
	add.s64 	%rd52, %rd51, 4;
	add.s64 	%rd53, %rd51, 8;
	add.s64 	%rd54, %rd51, 12;
	add.s64 	%rd55, %rd167, %rd178;
	add.s64 	%rd56, %rd55, 4;
	add.s64 	%rd57, %rd55, 8;
	add.s64 	%rd58, %rd55, 12;
	add.s64 	%rd59, %rd169, %rd178;
	add.s64 	%rd60, %rd59, 4;
	add.s64 	%rd61, %rd59, 8;
	add.s64 	%rd62, %rd59, 12;
	add.s64 	%rd63, %rd171, %rd178;
	add.s64 	%rd64, %rd63, 4;
	add.s64 	%rd65, %rd63, 8;
	add.s64 	%rd66, %rd63, 12;
	add.s64 	%rd67, %rd173, %rd178;
	add.s64 	%rd68, %rd67, 4;
	add.s64 	%rd69, %rd67, 8;
	add.s64 	%rd70, %rd67, 12;
	add.s64 	%rd71, %rd175, %rd178;
	add.s64 	%rd72, %rd71, 4;
	add.s64 	%rd73, %rd71, 8;
	add.s64 	%rd74, %rd71, 12;
	add.s64 	%rd75, %rd177, %rd178;
	add.s64 	%rd76, %rd75, 4;
	add.s64 	%rd77, %rd75, 8;
	add.s64 	%rd78, %rd75, 12;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ matmul.py:32:33 ]
	add.s32 	%r30, %r99, 63;
$L__tmp2:
	.loc	1 38 33                         // matmul.py:38:33
	shr.u32 	%r400, %r1, 5;
	shfl.sync.idx.b32 	%r32, %r400, 0, 31, -1;
	shl.b32 	%r401, %r32, 21;
	and.b32 	%r402, %r401, 6291456;
	shl.b32 	%r403, %r32, 4;
	and.b32 	%r404, %r403, -64;
	add.s32 	%r405, %r402, %r1077;
	add.s32 	%r1012, %r405, %r404;
	mov.pred 	%p31, -1;
	mov.b32 	%r1134, 0;
	// begin inline asm
	@%p31 tcgen05.st.sync.aligned.32x32b.x64.b32 [%r1012 + 0], {%r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134, %r1134};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	bar.sync 	0;
	.loc	1 32 22                         // matmul.py:32:22
	setp.eq.s32 	%p90, %r3, 0;
	add.s32 	%r1133, %r103, 147456;
	// begin inline asm
	@%p90 mbarrier.init.shared::cta.b64 [%r1133], 1;
	// end inline asm
	bar.sync 	0;
	add.s32 	%r170, %r103, 147464;
	// begin inline asm
	@%p90 mbarrier.init.shared::cta.b64 [%r170], 1;
	// end inline asm
	setp.lt.s32 	%p6, %r30, 64;
	setp.gt.s32 	%p7, %r30, 63;
	.loc	1 35 82                         // matmul.py:35:82
	setp.lt.s32 	%p8, %r29, %r99;
	.loc	1 35 20                         // matmul.py:35:20
	and.b32 	%r406, %r1, 1;
	neg.s32 	%r407, %r406;
	shl.b32 	%r408, %r1, 9;
	or.b32 	%r409, %r368, %r408;
	and.b32 	%r410, %r409, 4124;
	bfe.s32 	%r411, %r1, 4, 1;
	and.b32 	%r412, %r411, 36;
	and.b32 	%r413, %r1, 32;
	bfe.s32 	%r414, %r1, 5, 1;
	and.b32 	%r415, %r414, 72;
	and.b32 	%r416, %r1, 64;
	bfe.s32 	%r417, %r1, 6, 1;
	and.b32 	%r418, %r417, 144;
	or.b32 	%r419, %r415, %r412;
	xor.b32 	%r420, %r419, %r410;
	xor.b32 	%r34, %r420, %r418;
	shl.b32 	%r421, %r34, 2;
	add.s32 	%r171, %r103, %r421;
	or.b32 	%r422, %r410, 256;
	or.b32 	%r423, %r419, %r418;
	xor.b32 	%r35, %r423, %r422;
	shl.b32 	%r424, %r35, 2;
	add.s32 	%r173, %r103, %r424;
	or.b32 	%r425, %r410, 512;
	xor.b32 	%r36, %r423, %r425;
	shl.b32 	%r426, %r36, 2;
	add.s32 	%r175, %r103, %r426;
	or.b32 	%r427, %r410, 768;
	xor.b32 	%r37, %r423, %r427;
	shl.b32 	%r428, %r37, 2;
	add.s32 	%r177, %r103, %r428;
	or.b32 	%r429, %r410, 1024;
	xor.b32 	%r38, %r423, %r429;
	shl.b32 	%r430, %r38, 2;
	add.s32 	%r179, %r103, %r430;
	or.b32 	%r431, %r410, 1280;
	xor.b32 	%r39, %r423, %r431;
	shl.b32 	%r432, %r39, 2;
	add.s32 	%r181, %r103, %r432;
	or.b32 	%r433, %r410, 1536;
	xor.b32 	%r40, %r423, %r433;
	shl.b32 	%r434, %r40, 2;
	add.s32 	%r183, %r103, %r434;
	or.b32 	%r435, %r410, 1792;
	xor.b32 	%r41, %r423, %r435;
	shl.b32 	%r436, %r41, 2;
	add.s32 	%r185, %r103, %r436;
	or.b32 	%r437, %r410, 2048;
	xor.b32 	%r42, %r423, %r437;
	shl.b32 	%r438, %r42, 2;
	add.s32 	%r187, %r103, %r438;
	or.b32 	%r439, %r410, 2304;
	xor.b32 	%r43, %r423, %r439;
	shl.b32 	%r440, %r43, 2;
	add.s32 	%r189, %r103, %r440;
	or.b32 	%r441, %r410, 2560;
	xor.b32 	%r44, %r423, %r441;
	shl.b32 	%r442, %r44, 2;
	add.s32 	%r191, %r103, %r442;
	or.b32 	%r443, %r410, 2816;
	xor.b32 	%r45, %r423, %r443;
	shl.b32 	%r444, %r45, 2;
	add.s32 	%r193, %r103, %r444;
	or.b32 	%r445, %r410, 3072;
	xor.b32 	%r46, %r423, %r445;
	shl.b32 	%r446, %r46, 2;
	add.s32 	%r195, %r103, %r446;
	or.b32 	%r447, %r410, 3328;
	xor.b32 	%r47, %r423, %r447;
	shl.b32 	%r448, %r47, 2;
	add.s32 	%r197, %r103, %r448;
	or.b32 	%r449, %r410, 3584;
	xor.b32 	%r48, %r423, %r449;
	shl.b32 	%r450, %r48, 2;
	add.s32 	%r199, %r103, %r450;
	or.b32 	%r451, %r410, 3840;
	xor.b32 	%r49, %r423, %r451;
	shl.b32 	%r452, %r49, 2;
	add.s32 	%r201, %r103, %r452;
	selp.b32 	%r453, 16, 0, %p7;
	selp.b32 	%r174, %r453, 0, %p8;
	// begin inline asm
	cp.async.cg.shared.global [ %r171 + 0 ], [ %rd31 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r173 + 0 ], [ %rd32 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r175 + 0 ], [ %rd33 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r177 + 0 ], [ %rd34 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r179 + 0 ], [ %rd35 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r181 + 0 ], [ %rd36 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r183 + 0 ], [ %rd37 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r185 + 0 ], [ %rd38 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r187 + 0 ], [ %rd39 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r189 + 0 ], [ %rd40 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r191 + 0 ], [ %rd41 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r193 + 0 ], [ %rd42 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r195 + 0 ], [ %rd43 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r197 + 0 ], [ %rd44 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r199 + 0 ], [ %rd45 + 0 ], 0x10, %r174;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r201 + 0 ], [ %rd46 + 0 ], 0x10, %r174;
	// end inline asm
	cp.async.commit_group;
	.loc	1 36 82                         // matmul.py:36:82
	setp.lt.s32 	%p9, %r5, %r99;
	setp.lt.s32 	%p10, %r6, %r99;
	setp.lt.s32 	%p11, %r7, %r99;
	setp.lt.s32 	%p12, %r8, %r99;
	setp.lt.s32 	%p13, %r9, %r99;
	setp.lt.s32 	%p14, %r10, %r99;
	setp.lt.s32 	%p15, %r11, %r99;
	setp.lt.s32 	%p16, %r12, %r99;
	.loc	1 36 20                         // matmul.py:36:20
	and.b32 	%r454, %r407, 144;
	bfe.u32 	%r455, %r1, 4, 1;
	shl.b32 	%r456, %r1, 7;
	and.b32 	%r457, %r456, 1792;
	or.b32 	%r458, %r457, %r455;
	or.b32 	%r459, %r458, %r454;
	shr.u32 	%r460, %r413, 4;
	or.b32 	%r461, %r459, %r460;
	shr.u32 	%r462, %r416, 4;
	or.b32 	%r50, %r461, %r462;
	shl.b32 	%r463, %r50, 2;
	add.s32 	%r464, %r103, 98304;
	add.s32 	%r203, %r464, %r463;
	or.b32 	%r465, %r459, 36;
	or.b32 	%r466, %r462, %r460;
	xor.b32 	%r51, %r466, %r465;
	shl.b32 	%r467, %r51, 2;
	add.s32 	%r205, %r464, %r467;
	or.b32 	%r52, %r466, %r459;
	shl.b32 	%r468, %r52, 2;
	add.s32 	%r469, %r464, %r468;
	add.s32 	%r207, %r469, 288;
	or.b32 	%r470, %r459, 108;
	xor.b32 	%r53, %r466, %r470;
	shl.b32 	%r471, %r53, 2;
	add.s32 	%r209, %r464, %r471;
	add.s32 	%r211, %r469, 32;
	or.b32 	%r472, %r459, 44;
	xor.b32 	%r54, %r466, %r472;
	shl.b32 	%r473, %r54, 2;
	add.s32 	%r213, %r464, %r473;
	add.s32 	%r215, %r469, 256;
	or.b32 	%r474, %r459, 100;
	xor.b32 	%r55, %r466, %r474;
	shl.b32 	%r475, %r55, 2;
	add.s32 	%r217, %r464, %r475;
	xor.b32 	%r56, %r50, 16;
	shl.b32 	%r476, %r56, 2;
	add.s32 	%r219, %r464, %r476;
	xor.b32 	%r57, %r50, 52;
	shl.b32 	%r477, %r57, 2;
	add.s32 	%r221, %r464, %r477;
	xor.b32 	%r58, %r50, 88;
	shl.b32 	%r478, %r58, 2;
	add.s32 	%r223, %r464, %r478;
	xor.b32 	%r59, %r50, 124;
	shl.b32 	%r479, %r59, 2;
	add.s32 	%r225, %r464, %r479;
	xor.b32 	%r60, %r50, 24;
	shl.b32 	%r480, %r60, 2;
	add.s32 	%r227, %r464, %r480;
	xor.b32 	%r61, %r50, 60;
	shl.b32 	%r481, %r61, 2;
	add.s32 	%r229, %r464, %r481;
	xor.b32 	%r62, %r50, 80;
	shl.b32 	%r482, %r62, 2;
	add.s32 	%r231, %r464, %r482;
	xor.b32 	%r63, %r50, 116;
	shl.b32 	%r483, %r63, 2;
	add.s32 	%r233, %r464, %r483;
	add.s32 	%r235, %r469, 8192;
	or.b32 	%r484, %r459, 2084;
	xor.b32 	%r64, %r466, %r484;
	shl.b32 	%r485, %r64, 2;
	add.s32 	%r237, %r464, %r485;
	add.s32 	%r239, %r469, 8480;
	or.b32 	%r486, %r459, 2156;
	xor.b32 	%r65, %r466, %r486;
	shl.b32 	%r487, %r65, 2;
	add.s32 	%r241, %r464, %r487;
	add.s32 	%r243, %r469, 8224;
	or.b32 	%r488, %r459, 2092;
	xor.b32 	%r66, %r466, %r488;
	shl.b32 	%r489, %r66, 2;
	add.s32 	%r245, %r464, %r489;
	add.s32 	%r247, %r469, 8448;
	or.b32 	%r490, %r459, 2148;
	xor.b32 	%r67, %r466, %r490;
	shl.b32 	%r491, %r67, 2;
	add.s32 	%r249, %r464, %r491;
	xor.b32 	%r68, %r50, 2064;
	shl.b32 	%r492, %r68, 2;
	add.s32 	%r251, %r464, %r492;
	xor.b32 	%r69, %r50, 2100;
	shl.b32 	%r493, %r69, 2;
	add.s32 	%r253, %r464, %r493;
	xor.b32 	%r70, %r50, 2136;
	shl.b32 	%r494, %r70, 2;
	add.s32 	%r255, %r464, %r494;
	xor.b32 	%r71, %r50, 2172;
	shl.b32 	%r495, %r71, 2;
	add.s32 	%r257, %r464, %r495;
	xor.b32 	%r72, %r50, 2072;
	shl.b32 	%r496, %r72, 2;
	add.s32 	%r259, %r464, %r496;
	xor.b32 	%r73, %r50, 2108;
	shl.b32 	%r497, %r73, 2;
	add.s32 	%r261, %r464, %r497;
	xor.b32 	%r74, %r50, 2128;
	shl.b32 	%r498, %r74, 2;
	add.s32 	%r263, %r464, %r498;
	xor.b32 	%r75, %r50, 2164;
	shl.b32 	%r499, %r75, 2;
	add.s32 	%r265, %r464, %r499;
	selp.b32 	%r500, 4, 0, %p7;
	selp.b32 	%r206, %r500, 0, %p9;
	// begin inline asm
	cp.async.ca.shared.global [ %r203 + 0 ], [ %rd47 + 0 ], 0x4, %r206;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r205 + 0 ], [ %rd48 + 0 ], 0x4, %r206;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r207 + 0 ], [ %rd49 + 0 ], 0x4, %r206;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r209 + 0 ], [ %rd50 + 0 ], 0x4, %r206;
	// end inline asm
	selp.b32 	%r214, %r500, 0, %p10;
	// begin inline asm
	cp.async.ca.shared.global [ %r211 + 0 ], [ %rd51 + 0 ], 0x4, %r214;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r213 + 0 ], [ %rd52 + 0 ], 0x4, %r214;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r215 + 0 ], [ %rd53 + 0 ], 0x4, %r214;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r217 + 0 ], [ %rd54 + 0 ], 0x4, %r214;
	// end inline asm
	selp.b32 	%r222, %r500, 0, %p11;
	// begin inline asm
	cp.async.ca.shared.global [ %r219 + 0 ], [ %rd55 + 0 ], 0x4, %r222;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r221 + 0 ], [ %rd56 + 0 ], 0x4, %r222;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r223 + 0 ], [ %rd57 + 0 ], 0x4, %r222;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r225 + 0 ], [ %rd58 + 0 ], 0x4, %r222;
	// end inline asm
	selp.b32 	%r230, %r500, 0, %p12;
	// begin inline asm
	cp.async.ca.shared.global [ %r227 + 0 ], [ %rd59 + 0 ], 0x4, %r230;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r229 + 0 ], [ %rd60 + 0 ], 0x4, %r230;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r231 + 0 ], [ %rd61 + 0 ], 0x4, %r230;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r233 + 0 ], [ %rd62 + 0 ], 0x4, %r230;
	// end inline asm
	selp.b32 	%r238, %r500, 0, %p13;
	// begin inline asm
	cp.async.ca.shared.global [ %r235 + 0 ], [ %rd63 + 0 ], 0x4, %r238;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r237 + 0 ], [ %rd64 + 0 ], 0x4, %r238;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r239 + 0 ], [ %rd65 + 0 ], 0x4, %r238;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r241 + 0 ], [ %rd66 + 0 ], 0x4, %r238;
	// end inline asm
	selp.b32 	%r246, %r500, 0, %p14;
	// begin inline asm
	cp.async.ca.shared.global [ %r243 + 0 ], [ %rd67 + 0 ], 0x4, %r246;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r245 + 0 ], [ %rd68 + 0 ], 0x4, %r246;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r247 + 0 ], [ %rd69 + 0 ], 0x4, %r246;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r249 + 0 ], [ %rd70 + 0 ], 0x4, %r246;
	// end inline asm
	selp.b32 	%r254, %r500, 0, %p15;
	// begin inline asm
	cp.async.ca.shared.global [ %r251 + 0 ], [ %rd71 + 0 ], 0x4, %r254;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r253 + 0 ], [ %rd72 + 0 ], 0x4, %r254;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r255 + 0 ], [ %rd73 + 0 ], 0x4, %r254;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r257 + 0 ], [ %rd74 + 0 ], 0x4, %r254;
	// end inline asm
	selp.b32 	%r262, %r500, 0, %p16;
	// begin inline asm
	cp.async.ca.shared.global [ %r259 + 0 ], [ %rd75 + 0 ], 0x4, %r262;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r261 + 0 ], [ %rd76 + 0 ], 0x4, %r262;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r263 + 0 ], [ %rd77 + 0 ], 0x4, %r262;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r265 + 0 ], [ %rd78 + 0 ], 0x4, %r262;
	// end inline asm
	cp.async.commit_group;
	.loc	1 32 22                         // matmul.py:32:22
	setp.gt.s32 	%p17, %r30, 127;
	.loc	1 33 22                         // matmul.py:33:22
	add.s32 	%r501, %r99, -64;
	.loc	1 35 82                         // matmul.py:35:82
	setp.lt.s32 	%p18, %r29, %r501;
	.loc	1 35 29                         // matmul.py:35:29
	add.s64 	%rd79, %rd31, 256;
	add.s64 	%rd80, %rd32, 256;
	add.s64 	%rd81, %rd33, 256;
	add.s64 	%rd82, %rd34, 256;
	add.s64 	%rd83, %rd35, 256;
	add.s64 	%rd84, %rd36, 256;
	add.s64 	%rd85, %rd37, 256;
	add.s64 	%rd86, %rd38, 256;
	add.s64 	%rd87, %rd39, 256;
	add.s64 	%rd88, %rd40, 256;
	add.s64 	%rd89, %rd41, 256;
	add.s64 	%rd90, %rd42, 256;
	add.s64 	%rd91, %rd43, 256;
	add.s64 	%rd92, %rd44, 256;
	add.s64 	%rd93, %rd45, 256;
	add.s64 	%rd94, %rd46, 256;
	.loc	1 35 20                         // matmul.py:35:20
	bar.sync 	0;
	add.s32 	%r502, %r103, 32768;
	add.s32 	%r267, %r502, %r421;
	add.s32 	%r269, %r502, %r424;
	add.s32 	%r271, %r502, %r426;
	add.s32 	%r273, %r502, %r428;
	add.s32 	%r275, %r502, %r430;
	add.s32 	%r277, %r502, %r432;
	add.s32 	%r279, %r502, %r434;
	add.s32 	%r281, %r502, %r436;
	add.s32 	%r283, %r502, %r438;
	add.s32 	%r285, %r502, %r440;
	add.s32 	%r287, %r502, %r442;
	add.s32 	%r289, %r502, %r444;
	add.s32 	%r291, %r502, %r446;
	add.s32 	%r293, %r502, %r448;
	add.s32 	%r295, %r502, %r450;
	add.s32 	%r297, %r502, %r452;
	selp.b32 	%r503, 16, 0, %p18;
	selp.b32 	%r270, %r503, 0, %p17;
	// begin inline asm
	cp.async.cg.shared.global [ %r267 + 0 ], [ %rd79 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r269 + 0 ], [ %rd80 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r271 + 0 ], [ %rd81 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r273 + 0 ], [ %rd82 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r275 + 0 ], [ %rd83 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r277 + 0 ], [ %rd84 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r279 + 0 ], [ %rd85 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r281 + 0 ], [ %rd86 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r283 + 0 ], [ %rd87 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r285 + 0 ], [ %rd88 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r287 + 0 ], [ %rd89 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r289 + 0 ], [ %rd90 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r291 + 0 ], [ %rd91 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r293 + 0 ], [ %rd92 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r295 + 0 ], [ %rd93 + 0 ], 0x10, %r270;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r297 + 0 ], [ %rd94 + 0 ], 0x10, %r270;
	// end inline asm
	cp.async.commit_group;
	.loc	1 36 82                         // matmul.py:36:82
	setp.lt.s32 	%p19, %r5, %r501;
	setp.lt.s32 	%p20, %r6, %r501;
	setp.lt.s32 	%p21, %r7, %r501;
	setp.lt.s32 	%p22, %r8, %r501;
	setp.lt.s32 	%p23, %r9, %r501;
	setp.lt.s32 	%p24, %r10, %r501;
	setp.lt.s32 	%p25, %r11, %r501;
	setp.lt.s32 	%p26, %r12, %r501;
	.loc	1 36 48                         // matmul.py:36:48
	shl.b32 	%r76, %r101, 6;
	.loc	1 36 29                         // matmul.py:36:29
	mul.wide.s32 	%rd179, %r76, 4;
	add.s64 	%rd95, %rd47, %rd179;
	add.s64 	%rd96, %rd95, 4;
	add.s64 	%rd97, %rd95, 8;
	add.s64 	%rd98, %rd95, 12;
	add.s64 	%rd99, %rd51, %rd179;
	add.s64 	%rd100, %rd99, 4;
	add.s64 	%rd101, %rd99, 8;
	add.s64 	%rd102, %rd99, 12;
	add.s64 	%rd103, %rd55, %rd179;
	add.s64 	%rd104, %rd103, 4;
	add.s64 	%rd105, %rd103, 8;
	add.s64 	%rd106, %rd103, 12;
	add.s64 	%rd107, %rd59, %rd179;
	add.s64 	%rd108, %rd107, 4;
	add.s64 	%rd109, %rd107, 8;
	add.s64 	%rd110, %rd107, 12;
	add.s64 	%rd111, %rd63, %rd179;
	add.s64 	%rd112, %rd111, 4;
	add.s64 	%rd113, %rd111, 8;
	add.s64 	%rd114, %rd111, 12;
	add.s64 	%rd115, %rd67, %rd179;
	add.s64 	%rd116, %rd115, 4;
	add.s64 	%rd117, %rd115, 8;
	add.s64 	%rd118, %rd115, 12;
	add.s64 	%rd119, %rd71, %rd179;
	add.s64 	%rd120, %rd119, 4;
	add.s64 	%rd121, %rd119, 8;
	add.s64 	%rd122, %rd119, 12;
	add.s64 	%rd123, %rd75, %rd179;
	add.s64 	%rd124, %rd123, 4;
	add.s64 	%rd125, %rd123, 8;
	add.s64 	%rd126, %rd123, 12;
	.loc	1 36 20                         // matmul.py:36:20
	add.s32 	%r504, %r103, 114688;
	add.s32 	%r299, %r504, %r463;
	add.s32 	%r301, %r504, %r467;
	add.s32 	%r505, %r504, %r468;
	add.s32 	%r303, %r505, 288;
	add.s32 	%r305, %r504, %r471;
	add.s32 	%r307, %r505, 32;
	add.s32 	%r309, %r504, %r473;
	add.s32 	%r311, %r505, 256;
	add.s32 	%r313, %r504, %r475;
	add.s32 	%r315, %r504, %r476;
	add.s32 	%r317, %r504, %r477;
	add.s32 	%r319, %r504, %r478;
	add.s32 	%r321, %r504, %r479;
	add.s32 	%r323, %r504, %r480;
	add.s32 	%r325, %r504, %r481;
	add.s32 	%r327, %r504, %r482;
	add.s32 	%r329, %r504, %r483;
	add.s32 	%r331, %r505, 8192;
	add.s32 	%r333, %r504, %r485;
	add.s32 	%r335, %r505, 8480;
	add.s32 	%r337, %r504, %r487;
	add.s32 	%r339, %r505, 8224;
	add.s32 	%r341, %r504, %r489;
	add.s32 	%r343, %r505, 8448;
	add.s32 	%r345, %r504, %r491;
	add.s32 	%r347, %r504, %r492;
	add.s32 	%r349, %r504, %r493;
	add.s32 	%r351, %r504, %r494;
	add.s32 	%r353, %r504, %r495;
	add.s32 	%r355, %r504, %r496;
	add.s32 	%r357, %r504, %r497;
	add.s32 	%r359, %r504, %r498;
	add.s32 	%r361, %r504, %r499;
	selp.b32 	%r506, 4, 0, %p19;
	selp.b32 	%r302, %r506, 0, %p17;
	// begin inline asm
	cp.async.ca.shared.global [ %r299 + 0 ], [ %rd95 + 0 ], 0x4, %r302;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r301 + 0 ], [ %rd96 + 0 ], 0x4, %r302;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r303 + 0 ], [ %rd97 + 0 ], 0x4, %r302;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r305 + 0 ], [ %rd98 + 0 ], 0x4, %r302;
	// end inline asm
	selp.b32 	%r507, 4, 0, %p20;
	selp.b32 	%r310, %r507, 0, %p17;
	// begin inline asm
	cp.async.ca.shared.global [ %r307 + 0 ], [ %rd99 + 0 ], 0x4, %r310;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r309 + 0 ], [ %rd100 + 0 ], 0x4, %r310;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r311 + 0 ], [ %rd101 + 0 ], 0x4, %r310;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r313 + 0 ], [ %rd102 + 0 ], 0x4, %r310;
	// end inline asm
	selp.b32 	%r508, 4, 0, %p21;
	selp.b32 	%r318, %r508, 0, %p17;
	// begin inline asm
	cp.async.ca.shared.global [ %r315 + 0 ], [ %rd103 + 0 ], 0x4, %r318;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r317 + 0 ], [ %rd104 + 0 ], 0x4, %r318;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r319 + 0 ], [ %rd105 + 0 ], 0x4, %r318;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r321 + 0 ], [ %rd106 + 0 ], 0x4, %r318;
	// end inline asm
	selp.b32 	%r509, 4, 0, %p22;
	selp.b32 	%r326, %r509, 0, %p17;
	// begin inline asm
	cp.async.ca.shared.global [ %r323 + 0 ], [ %rd107 + 0 ], 0x4, %r326;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r325 + 0 ], [ %rd108 + 0 ], 0x4, %r326;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r327 + 0 ], [ %rd109 + 0 ], 0x4, %r326;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r329 + 0 ], [ %rd110 + 0 ], 0x4, %r326;
	// end inline asm
	selp.b32 	%r510, 4, 0, %p23;
	selp.b32 	%r334, %r510, 0, %p17;
	// begin inline asm
	cp.async.ca.shared.global [ %r331 + 0 ], [ %rd111 + 0 ], 0x4, %r334;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r333 + 0 ], [ %rd112 + 0 ], 0x4, %r334;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r335 + 0 ], [ %rd113 + 0 ], 0x4, %r334;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r337 + 0 ], [ %rd114 + 0 ], 0x4, %r334;
	// end inline asm
	selp.b32 	%r511, 4, 0, %p24;
	selp.b32 	%r342, %r511, 0, %p17;
	// begin inline asm
	cp.async.ca.shared.global [ %r339 + 0 ], [ %rd115 + 0 ], 0x4, %r342;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r341 + 0 ], [ %rd116 + 0 ], 0x4, %r342;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r343 + 0 ], [ %rd117 + 0 ], 0x4, %r342;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r345 + 0 ], [ %rd118 + 0 ], 0x4, %r342;
	// end inline asm
	selp.b32 	%r512, 4, 0, %p25;
	selp.b32 	%r350, %r512, 0, %p17;
	// begin inline asm
	cp.async.ca.shared.global [ %r347 + 0 ], [ %rd119 + 0 ], 0x4, %r350;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r349 + 0 ], [ %rd120 + 0 ], 0x4, %r350;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r351 + 0 ], [ %rd121 + 0 ], 0x4, %r350;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r353 + 0 ], [ %rd122 + 0 ], 0x4, %r350;
	// end inline asm
	selp.b32 	%r513, 4, 0, %p26;
	selp.b32 	%r358, %r513, 0, %p17;
	// begin inline asm
	cp.async.ca.shared.global [ %r355 + 0 ], [ %rd123 + 0 ], 0x4, %r358;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r357 + 0 ], [ %rd124 + 0 ], 0x4, %r358;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r359 + 0 ], [ %rd125 + 0 ], 0x4, %r358;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r361 + 0 ], [ %rd126 + 0 ], 0x4, %r358;
	// end inline asm
	cp.async.commit_group;
	.loc	1 35 20                         // matmul.py:35:20
	cp.async.wait_group 	2;
	bar.sync 	0;
	.loc	1 38 33                         // matmul.py:38:33
	setp.ne.s32 	%p27, %r32, 0;
	or.pred 	%p28, %p6, %p27;
	@%p28 bra 	$L__BB0_2;
// %bb.1:
	elect.sync 	%r530|%p30, -1;
	bfe.u32 	%r532, %r103, 4, 14;
	cvt.u64.u32 	%rd197, %r532;
	or.b64 	%rd180, %rd197, 4611686293372403712;
	bfe.u32 	%r534, %r464, 4, 14;
	cvt.u64.u32 	%rd198, %r534;
	or.b64 	%rd181, %rd198, 4611686293338849280;
	mov.b32 	%r515, 135268624;
	mov.pred 	%p29, 0;
	// begin inline asm
	@%p30 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd180, %rd181, %r515, %p29;
	// end inline asm
	add.s32 	%r535, %r103, 32;
	bfe.u32 	%r536, %r535, 4, 14;
	cvt.u64.u32 	%rd199, %r536;
	or.b64 	%rd182, %rd199, 4611686293372403712;
	add.s32 	%r537, %r103, 98336;
	bfe.u32 	%r538, %r537, 4, 14;
	cvt.u64.u32 	%rd200, %r538;
	or.b64 	%rd183, %rd200, 4611686293338849280;
	// begin inline asm
	@%p30 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd182, %rd183, %r515, %p31;
	// end inline asm
	add.s32 	%r539, %r103, 64;
	bfe.u32 	%r540, %r539, 4, 14;
	cvt.u64.u32 	%rd201, %r540;
	or.b64 	%rd184, %rd201, 4611686293372403712;
	add.s32 	%r541, %r103, 98368;
	bfe.u32 	%r542, %r541, 4, 14;
	cvt.u64.u32 	%rd202, %r542;
	or.b64 	%rd185, %rd202, 4611686293338849280;
	// begin inline asm
	@%p30 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd184, %rd185, %r515, %p31;
	// end inline asm
	add.s32 	%r543, %r103, 96;
	bfe.u32 	%r544, %r543, 4, 14;
	cvt.u64.u32 	%rd203, %r544;
	or.b64 	%rd186, %rd203, 4611686293372403712;
	add.s32 	%r545, %r103, 98400;
	bfe.u32 	%r546, %r545, 4, 14;
	cvt.u64.u32 	%rd204, %r546;
	or.b64 	%rd187, %rd204, 4611686293338849280;
	// begin inline asm
	@%p30 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd186, %rd187, %r515, %p31;
	// end inline asm
	add.s32 	%r547, %r103, 16384;
	bfe.u32 	%r548, %r547, 4, 14;
	cvt.u64.u32 	%rd205, %r548;
	or.b64 	%rd188, %rd205, 4611686293372403712;
	add.s32 	%r549, %r103, 106496;
	bfe.u32 	%r550, %r549, 4, 14;
	cvt.u64.u32 	%rd206, %r550;
	or.b64 	%rd189, %rd206, 4611686293338849280;
	// begin inline asm
	@%p30 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd188, %rd189, %r515, %p31;
	// end inline asm
	add.s32 	%r551, %r103, 16416;
	bfe.u32 	%r552, %r551, 4, 14;
	cvt.u64.u32 	%rd207, %r552;
	or.b64 	%rd190, %rd207, 4611686293372403712;
	add.s32 	%r553, %r103, 106528;
	bfe.u32 	%r554, %r553, 4, 14;
	cvt.u64.u32 	%rd208, %r554;
	or.b64 	%rd191, %rd208, 4611686293338849280;
	// begin inline asm
	@%p30 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd190, %rd191, %r515, %p31;
	// end inline asm
	add.s32 	%r555, %r103, 16448;
	bfe.u32 	%r556, %r555, 4, 14;
	cvt.u64.u32 	%rd209, %r556;
	or.b64 	%rd192, %rd209, 4611686293372403712;
	add.s32 	%r557, %r103, 106560;
	bfe.u32 	%r558, %r557, 4, 14;
	cvt.u64.u32 	%rd210, %r558;
	or.b64 	%rd193, %rd210, 4611686293338849280;
	// begin inline asm
	@%p30 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd192, %rd193, %r515, %p31;
	// end inline asm
	add.s32 	%r559, %r103, 16480;
	bfe.u32 	%r560, %r559, 4, 14;
	cvt.u64.u32 	%rd211, %r560;
	or.b64 	%rd194, %rd211, 4611686293372403712;
	add.s32 	%r561, %r103, 106592;
	bfe.u32 	%r562, %r561, 4, 14;
	cvt.u64.u32 	%rd212, %r562;
	or.b64 	%rd195, %rd212, 4611686293338849280;
	// begin inline asm
	@%p30 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd194, %rd195, %r515, %p31;
	// end inline asm
	add.s32 	%r563, %r103, 147456;
	cvt.u64.u32 	%rd196, %r563;
	// begin inline asm
	@%p30 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd196];
	// end inline asm
$L__BB0_2:
	.loc	1 32 22                         // matmul.py:32:22
	setp.gt.s32 	%p46, %r30, 191;
	setp.lt.s32 	%p47, %r30, 128;
	.loc	1 33 22                         // matmul.py:33:22
	add.s32 	%r662, %r99, -128;
	.loc	1 35 82                         // matmul.py:35:82
	setp.lt.s32 	%p48, %r29, %r662;
	.loc	1 35 29                         // matmul.py:35:29
	add.s64 	%rd213, %rd31, 512;
	add.s64 	%rd214, %rd32, 512;
	add.s64 	%rd215, %rd33, 512;
	add.s64 	%rd216, %rd34, 512;
	add.s64 	%rd217, %rd35, 512;
	add.s64 	%rd218, %rd36, 512;
	add.s64 	%rd219, %rd37, 512;
	add.s64 	%rd220, %rd38, 512;
	add.s64 	%rd221, %rd39, 512;
	add.s64 	%rd222, %rd40, 512;
	add.s64 	%rd223, %rd41, 512;
	add.s64 	%rd224, %rd42, 512;
	add.s64 	%rd225, %rd43, 512;
	add.s64 	%rd226, %rd44, 512;
	add.s64 	%rd227, %rd45, 512;
	add.s64 	%rd228, %rd46, 512;
	.loc	1 35 20                         // matmul.py:35:20
	bar.sync 	0;
	add.s32 	%r665, %r103, 65536;
	add.s32 	%r564, %r665, %r421;
	add.s32 	%r566, %r665, %r424;
	add.s32 	%r568, %r665, %r426;
	add.s32 	%r570, %r665, %r428;
	add.s32 	%r572, %r665, %r430;
	add.s32 	%r574, %r665, %r432;
	add.s32 	%r576, %r665, %r434;
	add.s32 	%r578, %r665, %r436;
	add.s32 	%r580, %r665, %r438;
	add.s32 	%r582, %r665, %r440;
	add.s32 	%r584, %r665, %r442;
	add.s32 	%r586, %r665, %r444;
	add.s32 	%r588, %r665, %r446;
	add.s32 	%r590, %r665, %r448;
	add.s32 	%r592, %r665, %r450;
	add.s32 	%r594, %r665, %r452;
	selp.b32 	%r681, 16, 0, %p48;
	selp.b32 	%r567, %r681, 0, %p46;
	// begin inline asm
	cp.async.cg.shared.global [ %r564 + 0 ], [ %rd213 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r566 + 0 ], [ %rd214 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r568 + 0 ], [ %rd215 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r570 + 0 ], [ %rd216 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r572 + 0 ], [ %rd217 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r574 + 0 ], [ %rd218 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r576 + 0 ], [ %rd219 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r578 + 0 ], [ %rd220 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r580 + 0 ], [ %rd221 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r582 + 0 ], [ %rd222 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r584 + 0 ], [ %rd223 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r586 + 0 ], [ %rd224 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r588 + 0 ], [ %rd225 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r590 + 0 ], [ %rd226 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r592 + 0 ], [ %rd227 + 0 ], 0x10, %r567;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r594 + 0 ], [ %rd228 + 0 ], 0x10, %r567;
	// end inline asm
	cp.async.commit_group;
	.loc	1 36 82                         // matmul.py:36:82
	setp.lt.s32 	%p49, %r5, %r662;
	setp.lt.s32 	%p50, %r6, %r662;
	setp.lt.s32 	%p51, %r7, %r662;
	setp.lt.s32 	%p52, %r8, %r662;
	setp.lt.s32 	%p53, %r9, %r662;
	setp.lt.s32 	%p54, %r10, %r662;
	setp.lt.s32 	%p55, %r11, %r662;
	setp.lt.s32 	%p56, %r12, %r662;
	.loc	1 36 48                         // matmul.py:36:48
	shl.b32 	%r682, %r101, 7;
	.loc	1 36 29                         // matmul.py:36:29
	mul.wide.s32 	%rd261, %r682, 4;
	add.s64 	%rd229, %rd47, %rd261;
	add.s64 	%rd230, %rd229, 4;
	add.s64 	%rd231, %rd229, 8;
	add.s64 	%rd232, %rd229, 12;
	add.s64 	%rd233, %rd51, %rd261;
	add.s64 	%rd234, %rd233, 4;
	add.s64 	%rd235, %rd233, 8;
	add.s64 	%rd236, %rd233, 12;
	add.s64 	%rd237, %rd55, %rd261;
	add.s64 	%rd238, %rd237, 4;
	add.s64 	%rd239, %rd237, 8;
	add.s64 	%rd240, %rd237, 12;
	add.s64 	%rd241, %rd59, %rd261;
	add.s64 	%rd242, %rd241, 4;
	add.s64 	%rd243, %rd241, 8;
	add.s64 	%rd244, %rd241, 12;
	add.s64 	%rd245, %rd63, %rd261;
	add.s64 	%rd246, %rd245, 4;
	add.s64 	%rd247, %rd245, 8;
	add.s64 	%rd248, %rd245, 12;
	add.s64 	%rd249, %rd67, %rd261;
	add.s64 	%rd250, %rd249, 4;
	add.s64 	%rd251, %rd249, 8;
	add.s64 	%rd252, %rd249, 12;
	add.s64 	%rd253, %rd71, %rd261;
	add.s64 	%rd254, %rd253, 4;
	add.s64 	%rd255, %rd253, 8;
	add.s64 	%rd256, %rd253, 12;
	add.s64 	%rd257, %rd75, %rd261;
	add.s64 	%rd258, %rd257, 4;
	add.s64 	%rd259, %rd257, 8;
	add.s64 	%rd260, %rd257, 12;
	.loc	1 36 20                         // matmul.py:36:20
	add.s32 	%r684, %r103, 131072;
	add.s32 	%r596, %r684, %r463;
	add.s32 	%r598, %r684, %r467;
	add.s32 	%r687, %r684, %r468;
	add.s32 	%r600, %r687, 288;
	add.s32 	%r602, %r684, %r471;
	add.s32 	%r604, %r687, 32;
	add.s32 	%r606, %r684, %r473;
	add.s32 	%r608, %r687, 256;
	add.s32 	%r610, %r684, %r475;
	add.s32 	%r612, %r684, %r476;
	add.s32 	%r614, %r684, %r477;
	add.s32 	%r616, %r684, %r478;
	add.s32 	%r618, %r684, %r479;
	add.s32 	%r620, %r684, %r480;
	add.s32 	%r622, %r684, %r481;
	add.s32 	%r624, %r684, %r482;
	add.s32 	%r626, %r684, %r483;
	add.s32 	%r628, %r687, 8192;
	add.s32 	%r630, %r684, %r485;
	add.s32 	%r632, %r687, 8480;
	add.s32 	%r634, %r684, %r487;
	add.s32 	%r636, %r687, 8224;
	add.s32 	%r638, %r684, %r489;
	add.s32 	%r640, %r687, 8448;
	add.s32 	%r642, %r684, %r491;
	add.s32 	%r644, %r684, %r492;
	add.s32 	%r646, %r684, %r493;
	add.s32 	%r648, %r684, %r494;
	add.s32 	%r650, %r684, %r495;
	add.s32 	%r652, %r684, %r496;
	add.s32 	%r654, %r684, %r497;
	add.s32 	%r656, %r684, %r498;
	add.s32 	%r658, %r684, %r499;
	selp.b32 	%r711, 4, 0, %p49;
	selp.b32 	%r599, %r711, 0, %p46;
	// begin inline asm
	cp.async.ca.shared.global [ %r596 + 0 ], [ %rd229 + 0 ], 0x4, %r599;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r598 + 0 ], [ %rd230 + 0 ], 0x4, %r599;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r600 + 0 ], [ %rd231 + 0 ], 0x4, %r599;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r602 + 0 ], [ %rd232 + 0 ], 0x4, %r599;
	// end inline asm
	selp.b32 	%r712, 4, 0, %p50;
	selp.b32 	%r607, %r712, 0, %p46;
	// begin inline asm
	cp.async.ca.shared.global [ %r604 + 0 ], [ %rd233 + 0 ], 0x4, %r607;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r606 + 0 ], [ %rd234 + 0 ], 0x4, %r607;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r608 + 0 ], [ %rd235 + 0 ], 0x4, %r607;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r610 + 0 ], [ %rd236 + 0 ], 0x4, %r607;
	// end inline asm
	selp.b32 	%r713, 4, 0, %p51;
	selp.b32 	%r615, %r713, 0, %p46;
	// begin inline asm
	cp.async.ca.shared.global [ %r612 + 0 ], [ %rd237 + 0 ], 0x4, %r615;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r614 + 0 ], [ %rd238 + 0 ], 0x4, %r615;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r616 + 0 ], [ %rd239 + 0 ], 0x4, %r615;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r618 + 0 ], [ %rd240 + 0 ], 0x4, %r615;
	// end inline asm
	selp.b32 	%r714, 4, 0, %p52;
	selp.b32 	%r623, %r714, 0, %p46;
	// begin inline asm
	cp.async.ca.shared.global [ %r620 + 0 ], [ %rd241 + 0 ], 0x4, %r623;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r622 + 0 ], [ %rd242 + 0 ], 0x4, %r623;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r624 + 0 ], [ %rd243 + 0 ], 0x4, %r623;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r626 + 0 ], [ %rd244 + 0 ], 0x4, %r623;
	// end inline asm
	selp.b32 	%r715, 4, 0, %p53;
	selp.b32 	%r631, %r715, 0, %p46;
	// begin inline asm
	cp.async.ca.shared.global [ %r628 + 0 ], [ %rd245 + 0 ], 0x4, %r631;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r630 + 0 ], [ %rd246 + 0 ], 0x4, %r631;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r632 + 0 ], [ %rd247 + 0 ], 0x4, %r631;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r634 + 0 ], [ %rd248 + 0 ], 0x4, %r631;
	// end inline asm
	selp.b32 	%r716, 4, 0, %p54;
	selp.b32 	%r639, %r716, 0, %p46;
	// begin inline asm
	cp.async.ca.shared.global [ %r636 + 0 ], [ %rd249 + 0 ], 0x4, %r639;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r638 + 0 ], [ %rd250 + 0 ], 0x4, %r639;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r640 + 0 ], [ %rd251 + 0 ], 0x4, %r639;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r642 + 0 ], [ %rd252 + 0 ], 0x4, %r639;
	// end inline asm
	selp.b32 	%r717, 4, 0, %p55;
	selp.b32 	%r647, %r717, 0, %p46;
	// begin inline asm
	cp.async.ca.shared.global [ %r644 + 0 ], [ %rd253 + 0 ], 0x4, %r647;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r646 + 0 ], [ %rd254 + 0 ], 0x4, %r647;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r648 + 0 ], [ %rd255 + 0 ], 0x4, %r647;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r650 + 0 ], [ %rd256 + 0 ], 0x4, %r647;
	// end inline asm
	selp.b32 	%r718, 4, 0, %p56;
	selp.b32 	%r655, %r718, 0, %p46;
	// begin inline asm
	cp.async.ca.shared.global [ %r652 + 0 ], [ %rd257 + 0 ], 0x4, %r655;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r654 + 0 ], [ %rd258 + 0 ], 0x4, %r655;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r656 + 0 ], [ %rd259 + 0 ], 0x4, %r655;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r658 + 0 ], [ %rd260 + 0 ], 0x4, %r655;
	// end inline asm
	cp.async.commit_group;
	.loc	1 32 22                         // matmul.py:32:22
	@%p47 bra 	$L__BB0_7;
// %bb.3:                               // %.lr.ph
	.loc	1 0 22                          // matmul.py:0:22
	shr.s32 	%r397, %r30, 31;
	shr.u32 	%r398, %r397, 26;
	add.s32 	%r399, %r30, %r398;
	shr.s32 	%r31, %r399, 6;
	add.s32 	%r724, %r31, -3;
	.loc	1 32 22                         // matmul.py:32:22
	cvt.s64.s32 	%rd26, %r724;
	max.s32 	%r725, %r31, 2;
	add.s32 	%r726, %r725, -1;
	cvt.u64.u32 	%rd27, %r726;
	mul.lo.s32 	%r1126, %r101, 192;
	add.s32 	%r1128, %r103, 147456;
	add.s32 	%r1124, %r99, -192;
	mov.b32 	%r1131, 1;
	mov.b32 	%r1130, 2;
	mov.b32 	%r1127, 0;
	mov.b64 	%rd395, 0;
	mov.b32 	%r1125, 192;
	mov.b32 	%r1129, %r1127;
	mov.b32 	%r1132, %r1127;
	bra.uni 	$L__BB0_4;
$L__BB0_6:                              //   in Loop: Header=BB0_4 Depth=1
	.loc	1 32 22                         // matmul.py:32:22
	setp.lt.s64 	%p76, %rd395, %rd26;
	.loc	1 38 33                         // matmul.py:38:33
	// begin inline asm
	
{
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r1128], %r1127;
	@!complete bra.uni waitLoop;
}

	// end inline asm
	add.s32 	%r883, %r1131, 1;
	setp.gt.s32 	%p77, %r883, 1;
	selp.b32 	%r1131, 0, %r883, %p77;
	selp.b32 	%r884, 1, 0, %p77;
	xor.b32 	%r1132, %r1134, %r884;
	.loc	1 32 22                         // matmul.py:32:22
	add.s32 	%r885, %r1130, 1;
	setp.gt.s32 	%p78, %r885, 2;
	selp.b32 	%r1130, 0, %r885, %p78;
	.loc	1 35 82                         // matmul.py:35:82
	setp.lt.s32 	%p79, %r29, %r1124;
	.loc	1 35 29                         // matmul.py:35:29
	mul.wide.s32 	%rd344, %r1125, 4;
	add.s64 	%rd296, %rd31, %rd344;
	add.s64 	%rd297, %rd32, %rd344;
	add.s64 	%rd298, %rd33, %rd344;
	add.s64 	%rd299, %rd34, %rd344;
	add.s64 	%rd300, %rd35, %rd344;
	add.s64 	%rd301, %rd36, %rd344;
	add.s64 	%rd302, %rd37, %rd344;
	add.s64 	%rd303, %rd38, %rd344;
	add.s64 	%rd304, %rd39, %rd344;
	add.s64 	%rd305, %rd40, %rd344;
	add.s64 	%rd306, %rd41, %rd344;
	add.s64 	%rd307, %rd42, %rd344;
	add.s64 	%rd308, %rd43, %rd344;
	add.s64 	%rd309, %rd44, %rd344;
	add.s64 	%rd310, %rd45, %rd344;
	add.s64 	%rd311, %rd46, %rd344;
	.loc	1 35 20                         // matmul.py:35:20
	shl.b32 	%r886, %r1130, 15;
	add.s32 	%r888, %r103, %r886;
	bar.sync 	0;
	add.s32 	%r787, %r888, %r421;
	add.s32 	%r789, %r888, %r424;
	add.s32 	%r791, %r888, %r426;
	add.s32 	%r793, %r888, %r428;
	add.s32 	%r795, %r888, %r430;
	add.s32 	%r797, %r888, %r432;
	add.s32 	%r799, %r888, %r434;
	add.s32 	%r801, %r888, %r436;
	add.s32 	%r803, %r888, %r438;
	add.s32 	%r805, %r888, %r440;
	add.s32 	%r807, %r888, %r442;
	add.s32 	%r809, %r888, %r444;
	add.s32 	%r811, %r888, %r446;
	add.s32 	%r813, %r888, %r448;
	add.s32 	%r815, %r888, %r450;
	add.s32 	%r817, %r888, %r452;
	selp.b32 	%r905, 16, 0, %p79;
	selp.b32 	%r790, %r905, 0, %p76;
	// begin inline asm
	cp.async.cg.shared.global [ %r787 + 0 ], [ %rd296 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r789 + 0 ], [ %rd297 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r791 + 0 ], [ %rd298 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r793 + 0 ], [ %rd299 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r795 + 0 ], [ %rd300 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r797 + 0 ], [ %rd301 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r799 + 0 ], [ %rd302 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r801 + 0 ], [ %rd303 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r803 + 0 ], [ %rd304 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r805 + 0 ], [ %rd305 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r807 + 0 ], [ %rd306 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r809 + 0 ], [ %rd307 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r811 + 0 ], [ %rd308 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r813 + 0 ], [ %rd309 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r815 + 0 ], [ %rd310 + 0 ], 0x10, %r790;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r817 + 0 ], [ %rd311 + 0 ], 0x10, %r790;
	// end inline asm
	cp.async.commit_group;
	.loc	1 36 82                         // matmul.py:36:82
	setp.lt.s32 	%p80, %r5, %r1124;
	setp.lt.s32 	%p81, %r6, %r1124;
	setp.lt.s32 	%p82, %r7, %r1124;
	setp.lt.s32 	%p83, %r8, %r1124;
	setp.lt.s32 	%p84, %r9, %r1124;
	setp.lt.s32 	%p85, %r10, %r1124;
	setp.lt.s32 	%p86, %r11, %r1124;
	setp.lt.s32 	%p87, %r12, %r1124;
	.loc	1 36 29                         // matmul.py:36:29
	mul.wide.s32 	%rd345, %r1126, 4;
	add.s64 	%rd312, %rd47, %rd345;
	add.s64 	%rd313, %rd312, 4;
	add.s64 	%rd314, %rd312, 8;
	add.s64 	%rd315, %rd312, 12;
	add.s64 	%rd316, %rd51, %rd345;
	add.s64 	%rd317, %rd316, 4;
	add.s64 	%rd318, %rd316, 8;
	add.s64 	%rd319, %rd316, 12;
	add.s64 	%rd320, %rd55, %rd345;
	add.s64 	%rd321, %rd320, 4;
	add.s64 	%rd322, %rd320, 8;
	add.s64 	%rd323, %rd320, 12;
	add.s64 	%rd324, %rd59, %rd345;
	add.s64 	%rd325, %rd324, 4;
	add.s64 	%rd326, %rd324, 8;
	add.s64 	%rd327, %rd324, 12;
	add.s64 	%rd328, %rd63, %rd345;
	add.s64 	%rd329, %rd328, 4;
	add.s64 	%rd330, %rd328, 8;
	add.s64 	%rd331, %rd328, 12;
	add.s64 	%rd332, %rd67, %rd345;
	add.s64 	%rd333, %rd332, 4;
	add.s64 	%rd334, %rd332, 8;
	add.s64 	%rd335, %rd332, 12;
	add.s64 	%rd336, %rd71, %rd345;
	add.s64 	%rd337, %rd336, 4;
	add.s64 	%rd338, %rd336, 8;
	add.s64 	%rd339, %rd336, 12;
	add.s64 	%rd340, %rd75, %rd345;
	add.s64 	%rd341, %rd340, 4;
	add.s64 	%rd342, %rd340, 8;
	add.s64 	%rd343, %rd340, 12;
	.loc	1 36 20                         // matmul.py:36:20
	shl.b32 	%r906, %r1130, 14;
	add.s32 	%r907, %r103, %r906;
	add.s32 	%r908, %r907, 98304;
	add.s32 	%r819, %r908, %r463;
	add.s32 	%r821, %r908, %r467;
	add.s32 	%r912, %r908, %r468;
	add.s32 	%r823, %r912, 288;
	add.s32 	%r825, %r908, %r471;
	add.s32 	%r827, %r912, 32;
	add.s32 	%r829, %r908, %r473;
	add.s32 	%r831, %r912, 256;
	add.s32 	%r833, %r908, %r475;
	add.s32 	%r835, %r908, %r476;
	add.s32 	%r837, %r908, %r477;
	add.s32 	%r839, %r908, %r478;
	add.s32 	%r841, %r908, %r479;
	add.s32 	%r843, %r908, %r480;
	add.s32 	%r845, %r908, %r481;
	add.s32 	%r847, %r908, %r482;
	add.s32 	%r849, %r908, %r483;
	add.s32 	%r851, %r912, 8192;
	add.s32 	%r853, %r908, %r485;
	add.s32 	%r855, %r912, 8480;
	add.s32 	%r857, %r908, %r487;
	add.s32 	%r859, %r912, 8224;
	add.s32 	%r861, %r908, %r489;
	add.s32 	%r863, %r912, 8448;
	add.s32 	%r865, %r908, %r491;
	add.s32 	%r867, %r908, %r492;
	add.s32 	%r869, %r908, %r493;
	add.s32 	%r871, %r908, %r494;
	add.s32 	%r873, %r908, %r495;
	add.s32 	%r875, %r908, %r496;
	add.s32 	%r877, %r908, %r497;
	add.s32 	%r879, %r908, %r498;
	add.s32 	%r881, %r908, %r499;
	selp.b32 	%r936, 4, 0, %p80;
	selp.b32 	%r822, %r936, 0, %p76;
	// begin inline asm
	cp.async.ca.shared.global [ %r819 + 0 ], [ %rd312 + 0 ], 0x4, %r822;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r821 + 0 ], [ %rd313 + 0 ], 0x4, %r822;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r823 + 0 ], [ %rd314 + 0 ], 0x4, %r822;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r825 + 0 ], [ %rd315 + 0 ], 0x4, %r822;
	// end inline asm
	selp.b32 	%r937, 4, 0, %p81;
	selp.b32 	%r830, %r937, 0, %p76;
	// begin inline asm
	cp.async.ca.shared.global [ %r827 + 0 ], [ %rd316 + 0 ], 0x4, %r830;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r829 + 0 ], [ %rd317 + 0 ], 0x4, %r830;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r831 + 0 ], [ %rd318 + 0 ], 0x4, %r830;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r833 + 0 ], [ %rd319 + 0 ], 0x4, %r830;
	// end inline asm
	selp.b32 	%r938, 4, 0, %p82;
	selp.b32 	%r838, %r938, 0, %p76;
	// begin inline asm
	cp.async.ca.shared.global [ %r835 + 0 ], [ %rd320 + 0 ], 0x4, %r838;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r837 + 0 ], [ %rd321 + 0 ], 0x4, %r838;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r839 + 0 ], [ %rd322 + 0 ], 0x4, %r838;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r841 + 0 ], [ %rd323 + 0 ], 0x4, %r838;
	// end inline asm
	selp.b32 	%r939, 4, 0, %p83;
	selp.b32 	%r846, %r939, 0, %p76;
	// begin inline asm
	cp.async.ca.shared.global [ %r843 + 0 ], [ %rd324 + 0 ], 0x4, %r846;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r845 + 0 ], [ %rd325 + 0 ], 0x4, %r846;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r847 + 0 ], [ %rd326 + 0 ], 0x4, %r846;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r849 + 0 ], [ %rd327 + 0 ], 0x4, %r846;
	// end inline asm
	selp.b32 	%r940, 4, 0, %p84;
	selp.b32 	%r854, %r940, 0, %p76;
	// begin inline asm
	cp.async.ca.shared.global [ %r851 + 0 ], [ %rd328 + 0 ], 0x4, %r854;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r853 + 0 ], [ %rd329 + 0 ], 0x4, %r854;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r855 + 0 ], [ %rd330 + 0 ], 0x4, %r854;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r857 + 0 ], [ %rd331 + 0 ], 0x4, %r854;
	// end inline asm
	selp.b32 	%r941, 4, 0, %p85;
	selp.b32 	%r862, %r941, 0, %p76;
	// begin inline asm
	cp.async.ca.shared.global [ %r859 + 0 ], [ %rd332 + 0 ], 0x4, %r862;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r861 + 0 ], [ %rd333 + 0 ], 0x4, %r862;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r863 + 0 ], [ %rd334 + 0 ], 0x4, %r862;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r865 + 0 ], [ %rd335 + 0 ], 0x4, %r862;
	// end inline asm
	selp.b32 	%r942, 4, 0, %p86;
	selp.b32 	%r870, %r942, 0, %p76;
	// begin inline asm
	cp.async.ca.shared.global [ %r867 + 0 ], [ %rd336 + 0 ], 0x4, %r870;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r869 + 0 ], [ %rd337 + 0 ], 0x4, %r870;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r871 + 0 ], [ %rd338 + 0 ], 0x4, %r870;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r873 + 0 ], [ %rd339 + 0 ], 0x4, %r870;
	// end inline asm
	selp.b32 	%r943, 4, 0, %p87;
	selp.b32 	%r878, %r943, 0, %p76;
	// begin inline asm
	cp.async.ca.shared.global [ %r875 + 0 ], [ %rd340 + 0 ], 0x4, %r878;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r877 + 0 ], [ %rd341 + 0 ], 0x4, %r878;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r879 + 0 ], [ %rd342 + 0 ], 0x4, %r878;
	// end inline asm
	// begin inline asm
	cp.async.ca.shared.global [ %r881 + 0 ], [ %rd343 + 0 ], 0x4, %r878;
	// end inline asm
	cp.async.commit_group;
	.loc	1 32 22                         // matmul.py:32:22
	add.s64 	%rd395, %rd395, 1;
	add.s32 	%r1126, %r1126, %r76;
	add.s32 	%r1125, %r1125, 64;
	add.s32 	%r1124, %r1124, -64;
	setp.ne.s64 	%p88, %rd27, %rd395;
	mov.b32 	%r1127, %r1134;
	mov.b32 	%r1128, %r1133;
	@%p88 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_7;
$L__BB0_4:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // matmul.py:0:22
	mov.b32 	%r1134, %r1132;
	.loc	1 32 22                         // matmul.py:32:22
	add.s32 	%r728, %r1129, 1;
	setp.gt.s32 	%p58, %r728, 2;
	selp.b32 	%r1129, 0, %r728, %p58;
	.loc	1 35 20                         // matmul.py:35:20
	cp.async.wait_group 	2;
	bar.sync 	0;
	.loc	1 32 22                         // matmul.py:32:22
	shl.b32 	%r729, %r1131, 3;
	add.s32 	%r731, %r103, %r729;
	add.s32 	%r1133, %r731, 147456;
	.loc	1 38 33                         // matmul.py:38:33
	@%p27 bra 	$L__BB0_6;
// %bb.5:                               //   in Loop: Header=BB0_4 Depth=1
	.loc	1 36 20                         // matmul.py:36:20
	shl.b32 	%r748, %r1129, 14;
	add.s32 	%r750, %r103, %r748;
	add.s32 	%r751, %r750, 98304;
	.loc	1 35 20                         // matmul.py:35:20
	shl.b32 	%r752, %r1129, 15;
	add.s32 	%r753, %r103, %r752;
	.loc	1 38 33                         // matmul.py:38:33
	elect.sync 	%r754|%p60, -1;
	bfe.u32 	%r755, %r753, 4, 14;
	cvt.u64.u32 	%rd280, %r755;
	or.b64 	%rd263, %rd280, 4611686293372403712;
	bfe.u32 	%r756, %r751, 4, 14;
	cvt.u64.u32 	%rd281, %r756;
	or.b64 	%rd264, %rd281, 4611686293338849280;
	mov.b32 	%r733, 135268624;
	mov.pred 	%p59, -1;
	// begin inline asm
	@%p60 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd263, %rd264, %r733, %p59;
	// end inline asm
	add.s32 	%r757, %r753, 32;
	bfe.u32 	%r758, %r757, 4, 14;
	cvt.u64.u32 	%rd282, %r758;
	or.b64 	%rd265, %rd282, 4611686293372403712;
	add.s32 	%r759, %r750, 98336;
	bfe.u32 	%r760, %r759, 4, 14;
	cvt.u64.u32 	%rd283, %r760;
	or.b64 	%rd266, %rd283, 4611686293338849280;
	// begin inline asm
	@%p60 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd265, %rd266, %r733, %p59;
	// end inline asm
	add.s32 	%r761, %r753, 64;
	bfe.u32 	%r762, %r761, 4, 14;
	cvt.u64.u32 	%rd284, %r762;
	or.b64 	%rd267, %rd284, 4611686293372403712;
	add.s32 	%r763, %r750, 98368;
	bfe.u32 	%r764, %r763, 4, 14;
	cvt.u64.u32 	%rd285, %r764;
	or.b64 	%rd268, %rd285, 4611686293338849280;
	// begin inline asm
	@%p60 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd267, %rd268, %r733, %p59;
	// end inline asm
	add.s32 	%r765, %r753, 96;
	bfe.u32 	%r766, %r765, 4, 14;
	cvt.u64.u32 	%rd286, %r766;
	or.b64 	%rd269, %rd286, 4611686293372403712;
	add.s32 	%r767, %r750, 98400;
	bfe.u32 	%r768, %r767, 4, 14;
	cvt.u64.u32 	%rd287, %r768;
	or.b64 	%rd270, %rd287, 4611686293338849280;
	// begin inline asm
	@%p60 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd269, %rd270, %r733, %p59;
	// end inline asm
	add.s32 	%r769, %r753, 16384;
	bfe.u32 	%r770, %r769, 4, 14;
	cvt.u64.u32 	%rd288, %r770;
	or.b64 	%rd271, %rd288, 4611686293372403712;
	add.s32 	%r771, %r750, 106496;
	bfe.u32 	%r772, %r771, 4, 14;
	cvt.u64.u32 	%rd289, %r772;
	or.b64 	%rd272, %rd289, 4611686293338849280;
	// begin inline asm
	@%p60 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd271, %rd272, %r733, %p59;
	// end inline asm
	add.s32 	%r773, %r753, 16416;
	bfe.u32 	%r774, %r773, 4, 14;
	cvt.u64.u32 	%rd290, %r774;
	or.b64 	%rd273, %rd290, 4611686293372403712;
	add.s32 	%r775, %r750, 106528;
	bfe.u32 	%r776, %r775, 4, 14;
	cvt.u64.u32 	%rd291, %r776;
	or.b64 	%rd274, %rd291, 4611686293338849280;
	// begin inline asm
	@%p60 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd273, %rd274, %r733, %p59;
	// end inline asm
	add.s32 	%r777, %r753, 16448;
	bfe.u32 	%r778, %r777, 4, 14;
	cvt.u64.u32 	%rd292, %r778;
	or.b64 	%rd275, %rd292, 4611686293372403712;
	add.s32 	%r779, %r750, 106560;
	bfe.u32 	%r780, %r779, 4, 14;
	cvt.u64.u32 	%rd293, %r780;
	or.b64 	%rd276, %rd293, 4611686293338849280;
	// begin inline asm
	@%p60 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd275, %rd276, %r733, %p59;
	// end inline asm
	add.s32 	%r781, %r753, 16480;
	bfe.u32 	%r782, %r781, 4, 14;
	cvt.u64.u32 	%rd294, %r782;
	or.b64 	%rd277, %rd294, 4611686293372403712;
	add.s32 	%r783, %r750, 106592;
	bfe.u32 	%r784, %r783, 4, 14;
	cvt.u64.u32 	%rd295, %r784;
	or.b64 	%rd278, %rd295, 4611686293338849280;
	// begin inline asm
	@%p60 tcgen05.mma.cta_group::1.kind::tf32 [ %r1077 + 0 ], %rd277, %rd278, %r733, %p59;
	// end inline asm
	cvt.u64.u32 	%rd279, %r1133;
	// begin inline asm
	@%p60 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd279];
	// end inline asm
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %._crit_edge
	.loc	1 0 33                          // matmul.py:0:33
	ld.param.b32 	%r102, [matrix_multiplication_kernel_param_8];
	ld.param.b32 	%r100, [matrix_multiplication_kernel_param_5];
	ld.param.b32 	%r98, [matrix_multiplication_kernel_param_3];
	ld.param.b64 	%rd30, [matrix_multiplication_kernel_param_2];
	and.b32 	%r4, %r1, 112;
	or.b32 	%r21, %r13, 64;
	or.b32 	%r22, %r13, 72;
	or.b32 	%r23, %r13, 80;
	or.b32 	%r24, %r13, 88;
	or.b32 	%r25, %r13, 96;
	or.b32 	%r26, %r13, 104;
	or.b32 	%r27, %r13, 112;
	or.b32 	%r28, %r13, 120;
	cvt.s64.s32 	%rd17, %r369;
	.loc	1 32 22                         // matmul.py:32:22
	@%p6 bra 	$L__BB0_9;
// %bb.8:
	.loc	1 38 33                         // matmul.py:38:33
	// begin inline asm
	
{
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r1133], %r1134;
	@!complete bra.uni waitLoop;
}

	// end inline asm
$L__BB0_9:
	.loc	1 0 33                          // matmul.py:0:33
	cvt.u32.u64 	%r1078, %rd17;
	.loc	1 32 22                         // matmul.py:32:22
	cp.async.wait_group 	0;
	bar.sync 	0;
	add.s32 	%r946, %r103, 147456;
	// begin inline asm
	@%p90 mbarrier.inval.shared::cta.b64 [%r946];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p90 mbarrier.inval.shared::cta.b64 [%r170];
	// end inline asm
	.loc	1 41 39                         // matmul.py:41:39
	mul.lo.s32 	%r1080, %r102, %r13;
	mul.lo.s32 	%r1081, %r102, %r14;
	mul.lo.s32 	%r1082, %r102, %r15;
	mul.lo.s32 	%r1083, %r102, %r16;
	mul.lo.s32 	%r1084, %r102, %r17;
	mul.lo.s32 	%r1085, %r102, %r18;
	mul.lo.s32 	%r1086, %r102, %r19;
	mul.lo.s32 	%r1087, %r102, %r20;
	shl.b32 	%r1088, %r102, 6;
	add.s32 	%r1089, %r1080, %r1088;
	shl.b32 	%r1090, %r102, 3;
	add.s32 	%r1091, %r1089, %r1090;
	add.s32 	%r1092, %r1091, %r1090;
	add.s32 	%r1093, %r1092, %r1090;
	add.s32 	%r1094, %r1093, %r1090;
	add.s32 	%r1095, %r1094, %r1090;
	add.s32 	%r1096, %r1095, %r1090;
	add.s32 	%r1097, %r1096, %r1090;
	.loc	1 41 21                         // matmul.py:41:21
	mul.wide.s32 	%rd362, %r1080, 4;
	add.s64 	%rd363, %rd30, %rd362;
	mul.wide.s32 	%rd364, %r1081, 4;
	add.s64 	%rd365, %rd30, %rd364;
	mul.wide.s32 	%rd366, %r1082, 4;
	add.s64 	%rd367, %rd30, %rd366;
	mul.wide.s32 	%rd368, %r1083, 4;
	add.s64 	%rd369, %rd30, %rd368;
	mul.wide.s32 	%rd370, %r1084, 4;
	add.s64 	%rd371, %rd30, %rd370;
	mul.wide.s32 	%rd372, %r1085, 4;
	add.s64 	%rd373, %rd30, %rd372;
	mul.wide.s32 	%rd374, %r1086, 4;
	add.s64 	%rd375, %rd30, %rd374;
	mul.wide.s32 	%rd376, %r1087, 4;
	add.s64 	%rd377, %rd30, %rd376;
	mul.wide.s32 	%rd378, %r1089, 4;
	add.s64 	%rd379, %rd30, %rd378;
	mul.wide.s32 	%rd380, %r1091, 4;
	add.s64 	%rd381, %rd30, %rd380;
	mul.wide.s32 	%rd382, %r1092, 4;
	add.s64 	%rd383, %rd30, %rd382;
	mul.wide.s32 	%rd384, %r1093, 4;
	add.s64 	%rd385, %rd30, %rd384;
	mul.wide.s32 	%rd386, %r1094, 4;
	add.s64 	%rd387, %rd30, %rd386;
	mul.wide.s32 	%rd388, %r1095, 4;
	add.s64 	%rd389, %rd30, %rd388;
	mul.wide.s32 	%rd390, %r1096, 4;
	add.s64 	%rd391, %rd30, %rd390;
	mul.wide.s32 	%rd392, %r1097, 4;
	add.s64 	%rd393, %rd30, %rd392;
	.loc	1 41 51                         // matmul.py:41:51
	shl.b64 	%rd394, %rd17, 2;
	add.s64 	%rd346, %rd363, %rd394;
	add.s64 	%rd347, %rd365, %rd394;
	add.s64 	%rd348, %rd367, %rd394;
	add.s64 	%rd349, %rd369, %rd394;
	add.s64 	%rd350, %rd371, %rd394;
	add.s64 	%rd351, %rd373, %rd394;
	add.s64 	%rd352, %rd375, %rd394;
	add.s64 	%rd353, %rd377, %rd394;
	add.s64 	%rd354, %rd379, %rd394;
	add.s64 	%rd355, %rd381, %rd394;
	add.s64 	%rd356, %rd383, %rd394;
	add.s64 	%rd357, %rd385, %rd394;
	add.s64 	%rd358, %rd387, %rd394;
	add.s64 	%rd359, %rd389, %rd394;
	add.s64 	%rd360, %rd391, %rd394;
	add.s64 	%rd361, %rd393, %rd394;
	.loc	1 44 33                         // matmul.py:44:33
	setp.lt.s32 	%p109, %r13, %r98;
	setp.lt.s32 	%p110, %r14, %r98;
	setp.lt.s32 	%p111, %r15, %r98;
	setp.lt.s32 	%p112, %r16, %r98;
	setp.lt.s32 	%p113, %r17, %r98;
	setp.lt.s32 	%p114, %r18, %r98;
	setp.lt.s32 	%p115, %r19, %r98;
	setp.lt.s32 	%p116, %r20, %r98;
	setp.lt.s32 	%p117, %r21, %r98;
	setp.lt.s32 	%p118, %r22, %r98;
	setp.lt.s32 	%p119, %r23, %r98;
	setp.lt.s32 	%p120, %r24, %r98;
	setp.lt.s32 	%p121, %r25, %r98;
	setp.lt.s32 	%p122, %r26, %r98;
	setp.lt.s32 	%p123, %r27, %r98;
	setp.lt.s32 	%p124, %r28, %r98;
	.loc	1 44 58                         // matmul.py:44:58
	setp.lt.s32 	%p125, %r1078, %r100;
	.loc	1 44 39                         // matmul.py:44:39
	and.pred 	%p92, %p109, %p125;
	and.pred 	%p93, %p110, %p125;
	and.pred 	%p94, %p111, %p125;
	and.pred 	%p95, %p112, %p125;
	and.pred 	%p96, %p113, %p125;
	and.pred 	%p97, %p114, %p125;
	and.pred 	%p98, %p115, %p125;
	and.pred 	%p99, %p116, %p125;
	and.pred 	%p100, %p117, %p125;
	and.pred 	%p101, %p118, %p125;
	and.pred 	%p102, %p119, %p125;
	and.pred 	%p103, %p120, %p125;
	and.pred 	%p104, %p121, %p125;
	and.pred 	%p105, %p122, %p125;
	and.pred 	%p106, %p123, %p125;
	and.pred 	%p107, %p124, %p125;
	.loc	1 38 33                         // matmul.py:38:33
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x64.b32 {%r948, %r949, %r950, %r951, %r952, %r953, %r954, %r955, %r956, %r957, %r958, %r959, %r960, %r961, %r962, %r963, %r964, %r965, %r966, %r967, %r968, %r969, %r970, %r971, %r972, %r973, %r974, %r975, %r976, %r977, %r978, %r979, %r980, %r981, %r982, %r983, %r984, %r985, %r986, %r987, %r988, %r989, %r990, %r991, %r992, %r993, %r994, %r995, %r996, %r997, %r998, %r999, %r1000, %r1001, %r1002, %r1003, %r1004, %r1005, %r1006, %r1007, %r1008, %r1009, %r1010, %r1011}, [%r1012 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	1 45 21                         // matmul.py:45:21
	and.b32 	%r1098, %r1, 7;
	shl.b32 	%r1099, %r1098, 12;
	shl.b32 	%r1100, %r1, 4;
	and.b32 	%r1101, %r1100, 2032;
	or.b32 	%r1102, %r1099, %r1101;
	add.s32 	%r1103, %r103, %r1102;
	st.shared.v4.b32 	[%r1103], {%r948, %r949, %r950, %r951};
	st.shared.v4.b32 	[%r1103+2048], {%r980, %r981, %r982, %r983};
	xor.b32 	%r1104, %r1102, 16;
	add.s32 	%r1105, %r103, %r1104;
	st.shared.v4.b32 	[%r1105], {%r952, %r953, %r954, %r955};
	st.shared.v4.b32 	[%r1105+2048], {%r984, %r985, %r986, %r987};
	xor.b32 	%r1106, %r1102, 32;
	add.s32 	%r1107, %r103, %r1106;
	st.shared.v4.b32 	[%r1107], {%r956, %r957, %r958, %r959};
	st.shared.v4.b32 	[%r1107+2048], {%r988, %r989, %r990, %r991};
	xor.b32 	%r1108, %r1102, 48;
	add.s32 	%r1109, %r103, %r1108;
	st.shared.v4.b32 	[%r1109], {%r960, %r961, %r962, %r963};
	st.shared.v4.b32 	[%r1109+2048], {%r992, %r993, %r994, %r995};
	xor.b32 	%r1110, %r1102, 64;
	add.s32 	%r1111, %r103, %r1110;
	st.shared.v4.b32 	[%r1111], {%r964, %r965, %r966, %r967};
	st.shared.v4.b32 	[%r1111+2048], {%r996, %r997, %r998, %r999};
	xor.b32 	%r1112, %r1102, 80;
	add.s32 	%r1113, %r103, %r1112;
	st.shared.v4.b32 	[%r1113], {%r968, %r969, %r970, %r971};
	st.shared.v4.b32 	[%r1113+2048], {%r1000, %r1001, %r1002, %r1003};
	xor.b32 	%r1114, %r1102, 96;
	add.s32 	%r1115, %r103, %r1114;
	st.shared.v4.b32 	[%r1115], {%r972, %r973, %r974, %r975};
	st.shared.v4.b32 	[%r1115+2048], {%r1004, %r1005, %r1006, %r1007};
	xor.b32 	%r1116, %r1102, 112;
	add.s32 	%r1117, %r103, %r1116;
	st.shared.v4.b32 	[%r1117], {%r976, %r977, %r978, %r979};
	st.shared.v4.b32 	[%r1117+2048], {%r1008, %r1009, %r1010, %r1011};
	bar.sync 	0;
	shl.b32 	%r1118, %r1, 8;
	and.b32 	%r1119, %r1118, 30720;
	shl.b32 	%r1120, %r1098, 4;
	or.b32 	%r1121, %r1119, %r1120;
	xor.b32 	%r1122, %r1121, %r4;
	add.s32 	%r1123, %r103, %r1122;
	ld.shared.v4.b32 	{%r1013, %r1014, %r1015, %r1016}, [%r1123];
	ld.shared.v4.b32 	{%r1017, %r1018, %r1019, %r1020}, [%r1123+128];
	ld.shared.v4.b32 	{%r1021, %r1022, %r1023, %r1024}, [%r1123+256];
	ld.shared.v4.b32 	{%r1025, %r1026, %r1027, %r1028}, [%r1123+384];
	ld.shared.v4.b32 	{%r1029, %r1030, %r1031, %r1032}, [%r1123+512];
	ld.shared.v4.b32 	{%r1033, %r1034, %r1035, %r1036}, [%r1123+640];
	ld.shared.v4.b32 	{%r1037, %r1038, %r1039, %r1040}, [%r1123+768];
	ld.shared.v4.b32 	{%r1041, %r1042, %r1043, %r1044}, [%r1123+896];
	ld.shared.v4.b32 	{%r1045, %r1046, %r1047, %r1048}, [%r1123+1024];
	ld.shared.v4.b32 	{%r1049, %r1050, %r1051, %r1052}, [%r1123+1152];
	ld.shared.v4.b32 	{%r1053, %r1054, %r1055, %r1056}, [%r1123+1280];
	ld.shared.v4.b32 	{%r1057, %r1058, %r1059, %r1060}, [%r1123+1408];
	ld.shared.v4.b32 	{%r1061, %r1062, %r1063, %r1064}, [%r1123+1536];
	ld.shared.v4.b32 	{%r1065, %r1066, %r1067, %r1068}, [%r1123+1664];
	ld.shared.v4.b32 	{%r1069, %r1070, %r1071, %r1072}, [%r1123+1792];
	ld.shared.v4.b32 	{%r1073, %r1074, %r1075, %r1076}, [%r1123+1920];
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd346 + 0 ], { %r1013, %r1014, %r1015, %r1016 };
	// end inline asm
	// begin inline asm
	@%p93 st.global.v4.b32 [ %rd347 + 0 ], { %r1017, %r1018, %r1019, %r1020 };
	// end inline asm
	// begin inline asm
	@%p94 st.global.v4.b32 [ %rd348 + 0 ], { %r1021, %r1022, %r1023, %r1024 };
	// end inline asm
	// begin inline asm
	@%p95 st.global.v4.b32 [ %rd349 + 0 ], { %r1025, %r1026, %r1027, %r1028 };
	// end inline asm
	// begin inline asm
	@%p96 st.global.v4.b32 [ %rd350 + 0 ], { %r1029, %r1030, %r1031, %r1032 };
	// end inline asm
	// begin inline asm
	@%p97 st.global.v4.b32 [ %rd351 + 0 ], { %r1033, %r1034, %r1035, %r1036 };
	// end inline asm
	// begin inline asm
	@%p98 st.global.v4.b32 [ %rd352 + 0 ], { %r1037, %r1038, %r1039, %r1040 };
	// end inline asm
	// begin inline asm
	@%p99 st.global.v4.b32 [ %rd353 + 0 ], { %r1041, %r1042, %r1043, %r1044 };
	// end inline asm
	// begin inline asm
	@%p100 st.global.v4.b32 [ %rd354 + 0 ], { %r1045, %r1046, %r1047, %r1048 };
	// end inline asm
	// begin inline asm
	@%p101 st.global.v4.b32 [ %rd355 + 0 ], { %r1049, %r1050, %r1051, %r1052 };
	// end inline asm
	// begin inline asm
	@%p102 st.global.v4.b32 [ %rd356 + 0 ], { %r1053, %r1054, %r1055, %r1056 };
	// end inline asm
	// begin inline asm
	@%p103 st.global.v4.b32 [ %rd357 + 0 ], { %r1057, %r1058, %r1059, %r1060 };
	// end inline asm
	// begin inline asm
	@%p104 st.global.v4.b32 [ %rd358 + 0 ], { %r1061, %r1062, %r1063, %r1064 };
	// end inline asm
	// begin inline asm
	@%p105 st.global.v4.b32 [ %rd359 + 0 ], { %r1065, %r1066, %r1067, %r1068 };
	// end inline asm
	// begin inline asm
	@%p106 st.global.v4.b32 [ %rd360 + 0 ], { %r1069, %r1070, %r1071, %r1072 };
	// end inline asm
	// begin inline asm
	@%p107 st.global.v4.b32 [ %rd361 + 0 ], { %r1073, %r1074, %r1075, %r1076 };
	// end inline asm
	.loc	1 45 4                          // matmul.py:45:4
	// begin inline asm
	@%p1 tcgen05.dealloc.cta_group::1.sync.aligned.b32 %r1077, 64;
	// end inline asm
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/ubuntu/triton/matmul.py"
	.file	2 "/home/ubuntu/triton/python/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 129                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x7a DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 117
.b8 98
.b8 117
.b8 110
.b8 116
.b8 117
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // Abbrev [2] 0x37:0x1f DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 97
.b8 116
.b8 114
.b8 105
.b8 120
.b8 95
.b8 109
.b8 117
.b8 108
.b8 116
.b8 105
.b8 112
.b8 108
.b8 105
.b8 99
.b8 97
.b8 116
.b8 105
.b8 111
.b8 110
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x56:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 55                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x6b:0x18 DW_TAG_inlined_subroutine
.b32 55                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 32                                  // DW_AT_call_line
.b8 33                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
